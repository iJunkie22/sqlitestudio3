/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 276
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 61
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  ParserOtherSourceList* yy11;
  SqliteSelect* yy13;
  int* yy16;
  ParserStubTransDetails* yy24;
  SqliteColumnType* yy37;
  SqliteConflictAlgo* yy38;
  ParserCreateTableConstraintList* yy43;
  SqliteIndexedColumn* yy58;
  ParserSetValueList* yy101;
  SqliteCreateTrigger::Scope* yy103;
  SqliteQuery* yy113;
  ParserIndexedColumnList* yy123;
  ParserStubAlias* yy130;
  ParserCreateTableColumnList* yy152;
  SqliteCreateTrigger::Time* yy153;
  SqliteInitially* yy192;
  ParserOrderByList* yy213;
  ParserFkConditionList* yy214;
  ParserQueryList* yy220;
  ParserDeferSubClause* yy229;
  SqliteSelect::Core* yy230;
  SqliteCreateTable::Column* yy237;
  ParserCreateTableColumnConstraintList* yy241;
  SqliteExpr* yy252;
  ParserStubInsertOrReplace* yy254;
  SqliteSelect::Core::JoinOp* yy301;
  ParserResultColumnList* yy303;
  SqliteWith* yy311;
  SqliteCreateTable::Constraint* yy326;
  SqliteForeignKey::Condition::Reaction* yy344;
  SqliteSelect::Core::SingleSource* yy361;
  SqliteSelect::CompoundOperator* yy382;
  ParserStringList* yy387;
  SqliteSortOrder* yy389;
  bool* yy401;
  SqliteExpr::LikeOp* yy430;
  SqliteCreateTrigger::Event* yy441;
  SqliteLimit* yy444;
  SqliteSelect::Core::JoinConstraint* yy445;
  ParserExprList* yy461;
  QVariant* yy469;
  QString* yy479;
  SqliteCreateTable::Column::Constraint* yy494;
  SqliteForeignKey::Condition* yy497;
  ParserFullName* yy500;
  ParserStubExplain* yy511;
  SqliteSelect::Core::JoinSource* yy531;
  ParserIndexedBy* yy532;
  ParserExprNestedList* yy546;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 721
#define YYNRULE 413
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2266)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   434,  486,  285,   60,  713,  158,   55,   56,  429,  292,
 /*    10 */   624,  428,  675,  675,   53,   53,   54,   54,   54,   54,
 /*    20 */   679,   52,   52,   52,   52,   51,   51,   50,   50,   50,
 /*    30 */    49,  234,  389,  950,  599,  598,  309,  488,  414,   51,
 /*    40 */    51,   50,   50,   50,   49,  234,  718,  679,  950,   50,
 /*    50 */    50,   50,   49,  234,  227,  682,  637,  637,  304,  587,
 /*    60 */    44,   54,   54,   54,   54,   47,   52,   52,   52,   52,
 /*    70 */    51,   51,   50,   50,   50,   49,  234,   41,   42,  605,
 /*    80 */   713,  202,  201,  128,   43,  881,  379,  376,  375,   35,
 /*    90 */   140,  673,    3,  881,  657,  950,   59,  679,   68,  425,
 /*   100 */   881,  486,  684,  432,  374,  656,  684,  687,  515,  501,
 /*   110 */   462,  687,   69,  502,  395,  686,  685,  684,  431,  686,
 /*   120 */   685,  684,  679,  712,  567,  568, 1013, 1013,  463,  464,
 /*   130 */   881,  433,  881,  881,  353,  659,  309,  487,  881,  683,
 /*   140 */   189,  137,   90,  881,  881,  881,  881,  881,  384,  679,
 /*   150 */   676,    9,  208,  207,  206,   55,   56,  429,  292, 1013,
 /*   160 */  1013,  675,  675,   53,   53,   54,   54,   54,   54, 1016,
 /*   170 */    52,   52,   52,   52,   51,   51,   50,   50,   50,   49,
 /*   180 */   234,  688,  711,  710,  623,  462,  689,  257,  365,  261,
 /*   190 */   218,  137,  410,  465,  666,  288,  713,  300,  712,  679,
 /*   200 */   688,  236,  390,  463,  344,  689, 1013, 1013,   55,   56,
 /*   210 */   429,  292,  768,   57,  675,  675,   53,   53,   54,   54,
 /*   220 */    54,   54,  620,   52,   52,   52,   52,   51,   51,   50,
 /*   230 */    50,   50,   49,  234,  623,   55,   56,  429,  292, 1013,
 /*   240 */  1013,  675,  675,   53,   53,   54,   54,   54,   54, 1025,
 /*   250 */    52,   52,   52,   52,   51,   51,   50,   50,   50,   49,
 /*   260 */   234,  657,  290,  271, 1025,  290,  631,  339,  345,  666,
 /*   270 */   770,  555,  656,  139,  684,  712,  712,   32,  712,  687,
 /*   280 */   694,   70,  555,  129,  712, 1013, 1013,  686,  685,  684,
 /*   290 */   434,  443,   70,  499, 1025,  712, 1025, 1025,  711,  710,
 /*   300 */   337,  428, 1016,  224, 1016,  542,  489, 1025,  713, 1025,
 /*   310 */  1025,  154,  713,  371,   55,   56,  429,  292, 1013, 1013,
 /*   320 */   675,  675,   53,   53,   54,   54,   54,   54,  414,   52,
 /*   330 */    52,   52,   52,   51,   51,   50,   50,   50,   49,  234,
 /*   340 */   713,  310, 1120,  658,  674,  682,  651,   89,  318, 1120,
 /*   350 */    44,  663,  556,  217,  499,   52,   52,   52,   52,   51,
 /*   360 */    51,   50,   50,   50,   49,  234,  601,   41,   42,  267,
 /*   370 */   713,  270,  323,   33,   43,  943,  283,  579,  277,  334,
 /*   380 */   713,  634,    3,  943,  153,  713,  555,  578,  713,  425,
 /*   390 */   943,  301,  684,  432,  282,  541,   70,  687,  713,  712,
 /*   400 */   232,  231,  215,  129,  648,  686,  685,  684,  485,  485,
 /*   410 */   711,  710,  342,  302,  711,  710, 1013, 1013,  628,   61,
 /*   420 */   943,  434,  943,  943,  141,   96,  284,  382,  279,  381,
 /*   430 */   130,  712,  428,  943,  943,  943,  943,  456,  668,  667,
 /*   440 */   676,    9,  711,  710,  277,   55,   56,  429,  292, 1013,
 /*   450 */  1013,  675,  675,   53,   53,   54,   54,   54,   54,  414,
 /*   460 */    52,   52,   52,   52,   51,   51,   50,   50,   50,   49,
 /*   470 */   234,  554,  711,  710,  713,  128,  682,  450,  379,  376,
 /*   480 */   375,   44,  711,  710,  336,  447,  644,  711,  710,   45,
 /*   490 */   711,  710,  323,  451,  450,  478,  374,  456,   41,   42,
 /*   500 */   711,  710,  447,  286,  431,   43,  928,  644,  275,  413,
 /*   510 */    82,  399,  408,    3,  928,   90,  712,  433,  644,  237,
 /*   520 */   425,  928,  450,  684,  432,  683,  189,  478,  687,  644,
 /*   530 */   447,  212,  597,  629,  388,  431,  686,  685,  684,  644,
 /*   540 */   612,  583,  709,  133, 1017,   92,   92,  707,  433,  713,
 /*   550 */   120,  928,  708,  928,  928,  672,  683,  182,  582,  407,
 /*   560 */   409,  644,  398,  314,  928,  360,  928,  928,  245,  661,
 /*   570 */   249,  676,    9,  679,  362,  489,  711,  710,  319,  401,
 /*   580 */   611,  607,  713,   55,   56,  429,  292,  712,  561,  675,
 /*   590 */   675,   53,   53,   54,   54,   54,   54,   18,   52,   52,
 /*   600 */    52,   52,   51,   51,   50,   50,   50,   49,  234,  643,
 /*   610 */   310, 1119,  251,  400,   55,   56,  429,  292, 1119,  713,
 /*   620 */   675,  675,   53,   53,   54,   54,   54,   54,  679,   52,
 /*   630 */    52,   52,   52,   51,   51,   50,   50,   50,   49,  234,
 /*   640 */   713,  951,  713,  624,  220,  537,  537,  713,  721,  624,
 /*   650 */   713,  711,  710,   15,  161,  713,  951,   54,   54,   54,
 /*   660 */    54,  431,   52,   52,   52,   52,   51,   51,   50,   50,
 /*   670 */    50,   49,  234,  341,  433,  679,  247, 1017,   14, 1017,
 /*   680 */   545,  572,  683,   93,  711,  710,  653,  616,  546,   55,
 /*   690 */    56,  429,  292,  615,  551,  675,  675,   53,   53,   54,
 /*   700 */    54,   54,   54,  951,   52,   52,   52,   52,   51,   51,
 /*   710 */    50,   50,   50,   49,  234, 1080,  498,  232,  231,  566,
 /*   720 */   349,  711,  710,  289,  595,  503,  504,  355,  405,  235,
 /*   730 */   679, 1024,  152,  618,  714,  643,  712,  719,   17,  494,
 /*   740 */   380,  558,  711,  710,  711,  710,  459,  528,  617,  711,
 /*   750 */   710,  565,  711,  710,  713,  668,  667,  711,  710,  461,
 /*   760 */   660,  460,   49,  234,  528,   55,   56,  429,  292,  544,
 /*   770 */    22,  675,  675,   53,   53,   54,   54,   54,   54,  493,
 /*   780 */    52,   52,   52,   52,   51,   51,   50,   50,   50,   49,
 /*   790 */   234,   40, 1080,   38,   55,   56,  429,  292,  494,  341,
 /*   800 */   675,  675,   53,   53,   54,   54,   54,   54,   90,   52,
 /*   810 */    52,   52,   52,   51,   51,   50,   50,   50,   49,  234,
 /*   820 */   372, 1094,  419,  421,  713, 1031,  576,   90,   55,   56,
 /*   830 */   429,  292,  160,  332,  675,  675,   53,   53,   54,   54,
 /*   840 */    54,   54,  650,   52,   52,   52,   52,   51,   51,   50,
 /*   850 */    50,   50,   49,  234, 1018,  424,  711,  710,  713,   55,
 /*   860 */    56,  429,  292,  719,   91,  675,  675,   53,   53,   54,
 /*   870 */    54,   54,   54,  420,   52,   52,   52,   52,   51,   51,
 /*   880 */    50,   50,   50,   49,  234, 1135,  155,  438,    2,   92,
 /*   890 */   518,  625,  417,   55,   56,  429,  292,  139,  159,  675,
 /*   900 */   675,   53,   53,   54,   54,   54,   54,   92,   52,   52,
 /*   910 */    52,   52,   51,   51,   50,   50,   50,   49,  234,  327,
 /*   920 */   204,  533,   55,   56,  429,  292,  711,  710,  675,  675,
 /*   930 */    53,   53,   54,   54,   54,   54,  324,   52,   52,   52,
 /*   940 */    52,   51,   51,   50,   50,   50,   49,  234,  713,  338,
 /*   950 */   671,  670,  533,  649,   39,  475,   55,   56,  429,  292,
 /*   960 */   711,  710,  675,  675,   53,   53,   54,   54,   54,   54,
 /*   970 */   628,   52,   52,   52,   52,   51,   51,   50,   50,   50,
 /*   980 */    49,  234,  713,  712,  668,  667,   55,   56,  429,  292,
 /*   990 */   647,  596,  675,  675,   53,   53,   54,   54,   54,   54,
 /*  1000 */   475,   52,   52,   52,   52,   51,   51,   50,   50,   50,
 /*  1010 */    49,  234,  210,  713,  352,  713,  666,   36,  663,  426,
 /*  1020 */   217,  591,   55,   56,  429,  292,  646,  604,  675,  675,
 /*  1030 */    53,   53,   54,   54,   54,   54,  329,   52,   52,   52,
 /*  1040 */    52,   51,   51,   50,   50,   50,   49,  234,  645,  254,
 /*  1050 */   711,  710,   55,   56,  429,  292,   31,  574,  675,  675,
 /*  1060 */    53,   53,   54,   54,   54,   54,  151,   52,   52,   52,
 /*  1070 */    52,   51,   51,   50,   50,   50,   49,  234,  713,  289,
 /*  1080 */   695,  585,  514,  584,  711,  710,  491,  274,   55,   56,
 /*  1090 */   429,  292,  712,  311,  675,  675,   53,   53,   54,   54,
 /*  1100 */    54,   54,  702,   52,   52,   52,   52,   51,   51,   50,
 /*  1110 */    50,   50,   49,  234,   82,  711,  710,  711,  710, 1020,
 /*  1120 */    55,   56,  429,  292,   23,  691,  675,  675,   53,   53,
 /*  1130 */    54,   54,   54,   54,  641,   52,   52,   52,   52,   51,
 /*  1140 */    51,   50,   50,   50,   49,  234,  640, 1095, 1065,   33,
 /*  1150 */    55,   56,  429,  292,  416,   12,  675,  675,   53,   53,
 /*  1160 */    54,   54,   54,   54,  713,   52,   52,   52,   52,   51,
 /*  1170 */    51,   50,   50,   50,   49,  234,   31, 1093,  423,  554,
 /*  1180 */   711,  710,    8,   55,   56,  429,  292,   88,   92,  675,
 /*  1190 */   675,   53,   53,   54,   54,   54,   54,  211,   52,   52,
 /*  1200 */    52,   52,   51,   51,   50,   50,   50,   49,  234,  619,
 /*  1210 */    55,   34,  429,  292,  455,  679,  675,  675,   53,   53,
 /*  1220 */    54,   54,   54,   54,  135,   52,   52,   52,   52,   51,
 /*  1230 */    51,   50,   50,   50,   49,  234,   56,  429,  292,  136,
 /*  1240 */   713,  675,  675,   53,   53,   54,   54,   54,   54,  134,
 /*  1250 */    52,   52,   52,   52,   51,   51,   50,   50,   50,   49,
 /*  1260 */   234,  434,  608,  427,  671,  670,  711,  710,  430,  429,
 /*  1270 */   292,  131,  428,  675,  675,   53,   53,   54,   54,   54,
 /*  1280 */    54,  712,   52,   52,   52,   52,   51,   51,   50,   50,
 /*  1290 */    50,   49,  234,  479,  394,  713,  826,  431,  540,  414,
 /*  1300 */    99,  268,  242,  543,  219,  269,  717,  431,  720,    2,
 /*  1310 */   433,  437,   82,  241,  712,  306,  682,  679,  683,  189,
 /*  1320 */   433,   44,  531,  713,  535,  603,   29,  713,  683,   93,
 /*  1330 */   666,   82,   92,  102,  236,  390,  303,  472,   41,   42,
 /*  1340 */   305,  145,  711,  710,  148,   43,  402,   82,  713,   98,
 /*  1350 */   434,  392,  335,    3, 1023,  471,   62,  531,   92,  290,
 /*  1360 */   425,  428,  286,  684,  432,  507,  713,  290,  687,  713,
 /*  1370 */     5,  319,  712,  520,  328,  712,  686,  685,  684,  713,
 /*  1380 */   712,  643,  470,  469,  307,  468,  143,   13,  414,   11,
 /*  1390 */   509,   62,  613,  677,  223, 1128, 1128,  711,  710,  472,
 /*  1400 */   713,   82,  331,  602,  600,  682,  712,   92,  440,  614,
 /*  1410 */    44,  676,    9,   28,  700,    1,  713,  510,  512,  107,
 /*  1420 */   511,  633,  314,  320,  613,  711,  710,   41,   42,  711,
 /*  1430 */   710,  594,  434,  431,   43,  897,  897,  593,    7,  358,
 /*  1440 */   651,  386,    3,  428,  539,  531,  433,  592,  651,  425,
 /*  1450 */   711,  710,  684,  432,  683,  183,  343,  687,   13,  713,
 /*  1460 */   286,  291,  713,  613,  290,  686,  685,  684,  711,  710,
 /*  1470 */   414,  711,  710,  712,  712,   92,  679,  712,  509,   62,
 /*  1480 */   614,  711,  710,  453, 1128, 1128,  226,  682,  387,  564,
 /*  1490 */    20,  628,   44,  449,  527,  613,  584,  522,  713,  330,
 /*  1500 */   676,    9,  711,  710,  712,  510,  512,  319,  511,   41,
 /*  1510 */    42,  453,  636,   82,  522,  434,   43,  411,  711,  710,
 /*  1520 */   228,  449,  378,  713,    3,  573,  428,  359,  693,  431,
 /*  1530 */   712,  425,  713,  263,  684,  432,  560,  222,   66,  687,
 /*  1540 */   212,  597,  433,  388,  534,  651,  712,  686,  685,  684,
 /*  1550 */   683,  189,  713,  414,   13,  891,  517,  354,  276,  613,
 /*  1560 */   713,  711,  710,  211,  711,  710,  431,   65,  431,  361,
 /*  1570 */   682,  713,  624,  517,   19,   44,  614,  373,  679,  433,
 /*  1580 */   662,  433,  676,    9,  407,  385,  713,  683,  189,  683,
 /*  1590 */   189,  613,   41,   42,  635,  482, 1128, 1128,  434,   43,
 /*  1600 */   711,  710,  260,  319,   64,  588,  221,    3,  273,  428,
 /*  1610 */   127,  282,  482,  690,  425,  712,  606,  684,  432,  536,
 /*  1620 */   157,  403,  687,  407,  391,  711,  710,  369,  431,  441,
 /*  1630 */   686,  685,  684,  211,  711,  710,  414,  123,  431,  698,
 /*  1640 */   319,  433,  319,  259,  639,  211,  441,  258,  431,  683,
 /*  1650 */   164,  433,    4,  682,  711,  710,  712,  712,   44,  683,
 /*  1660 */   170,  433,  711,  710,  431,  676,    9,   80,  713,  683,
 /*  1670 */   192,  431,   86,  711,  710,   41,   42,  433,   27,   26,
 /*  1680 */   434,  532,   43,  570,  433,  683,  190,   78,  711,  710,
 /*  1690 */     3,  428,  683,  198,  513,  250,  347,  425,  519,  484,
 /*  1700 */   684,  432,  643,  508,  356,  687,  713,  431,  712,  712,
 /*  1710 */   431,  610,  643,  686,  685,  684,  506,   84,  414,  139,
 /*  1720 */   433,  248,  643,  433,  467,  480,  609,  500,  683,  197,
 /*  1730 */   431,  683,  199,  256,  712,  682,  253,  712,  643,  117,
 /*  1740 */    44,  715,   10,  433,  109,  643,  431,  149,  676,    9,
 /*  1750 */  1021,  683,  203,  162,  712,  434,  246,   41,   42,  433,
 /*  1760 */   476,  244,  703,  481,   43,  473,  428,  683,  233,  712,
 /*  1770 */   711,  710,    3, 1023,  712,  712,  238,  431,  701,  425,
 /*  1780 */   325,  643,  684,  432,  643,   73,  458,  687,  699,  712,
 /*  1790 */   433,  712,  713,  414,  457,  686,  685,  684,  683,  293,
 /*  1800 */   434,  712,  492,  340,  643,  431,  696,  713,  711,  710,
 /*  1810 */   682,  428,  692,  439,   97,   44,  524,  716,  433,  712,
 /*  1820 */   643,  209,  431,  287,  431,  712,  683,  193,  211,  630,
 /*  1830 */   676,    9,   41,   42,  225,  433,  712,  433,  414,   43,
 /*  1840 */   626,   87,  712,  683,  196,  683,  195,    3,  205,  322,
 /*  1850 */   147,  643,  431,  712,  425,  682,  321,  684,  432,  706,
 /*  1860 */    44,  705,  687,  713,  704,  433,  370,  431,  621,  431,
 /*  1870 */   686,  685,  684,  683,  187,  436,  146,   41,   42,  643,
 /*  1880 */   433,  712,  433,  144,   43,  435,   83,  132,  683,  191,
 /*  1890 */   683,  317,    3,   16,  711,  710,  643,  697,  643,  425,
 /*  1900 */   712,  236,  711,  432,  142,  676,    9,  687,  431,  711,
 /*  1910 */   710,  431,   18,  404,  431,  686,  685,  684,  681,   30,
 /*  1920 */   297,  433,  296,  406,  433,  431,  643,  433,   58,  683,
 /*  1930 */   316,  431,  683,  315,  477,  683,  186,  713,  433,  294,
 /*  1940 */   295,  643,  431,  643,  433,  680,  683,  174,  431,  397,
 /*  1950 */   676,    9,  683,  185,  278,  433,  234,  642,  431,  571,
 /*  1960 */   713,  433,  712,  683,  184,  711,  710,  712,  713,  683,
 /*  1970 */   173,  433,  712,  431,   46,   67,  431,  505,  230,  683,
 /*  1980 */   188,  422,  643,  552,  713,  643,  433,  431,  643,  433,
 /*  1990 */   216,  431,  418,  713,  683,  194,  712,  683,  169,  643,
 /*  2000 */   433,  229,  431,   37,  433,  643,  431,  638,  683,  168,
 /*  2010 */   150,  713,  683,   94,  713,  433,  643,  108,  272,  433,
 /*  2020 */   431,  265,  643,  683,  167,  138,  393,  683,  165,  390,
 /*  2030 */   431,  712,  643,  433,  712,  713,  431,  586,  581,  711,
 /*  2040 */   710,  683,  176,  433,  713,  383,  431,  643,  713,  433,
 /*  2050 */   643,  683,  172,  431,  713,  580,  431,  683,  171,  433,
 /*  2060 */   431,  643,  711,  710,  444,  643,  433,  683,  175,  433,
 /*  2070 */   711,  710,  713,  433,  683,  179,  643,  683,   95,  431,
 /*  2080 */   643,  683,  178,  713,  431,  713,  711,  710,  333,  280,
 /*  2090 */   431,  576,  433,  497,  643,  711,  710,  433,  530,  577,
 /*  2100 */   683,  177,  431,  433,  643,  683,  181,  526,  575,  363,
 /*  2110 */   643,  683,  180,  711,  710,  433,  711,  710,  396,  474,
 /*  2120 */   643,  313,  712,  683,  166,  521,  550,  643,  495,  350,
 /*  2130 */   643,  433,  557,  549,  643,  445,  548,  711,  710,  683,
 /*  2140 */    71,  266,  712,  547,  538,  312,  711,  710,  712,  483,
 /*  2150 */   711,  710,  255,  643,  712,  126,  711,  710,  643,  252,
 /*  2160 */   243,   81,  446,  368,  643,  712,  125,  239,  648,  240,
 /*  2170 */   214,  106,  712,  712,  711,  710,  643,  124,  264,  357,
 /*  2180 */   712,   25,  712,  122,  366,  711,  710,  711,  710,   79,
 /*  2190 */   529,  105,  643,  121,  119,  156,   85,  104,  351,  516,
 /*  2200 */   118,  466,  652,  496,  103,  116,  348,  346,  115,  114,
 /*  2210 */    77,   76,   75,  113,   74,  112,  111,   24,  326,  454,
 /*  2220 */   452,   21,  101,  100,  110,   63,  448,  442,  163,  298,
 /*  2230 */   678,  627,  669,  523,  665,  655,  415,  281,  632,  572,
 /*  2240 */   200,  622,  377,  262,  364,  525,  308,  664,  654,    6,
 /*  2250 */   559,  213,   72,  299,  569,  553,  563,  412,  562,  367,
 /*  2260 */    48,  590,  490,   82, 1136,  589,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,   61,  104,   96,    4,   98,   62,   63,   64,   65,
 /*    10 */   189,   15,   68,   69,   70,   71,   72,   73,   74,   75,
 /*    20 */     4,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*    30 */    86,   87,  134,   89,  136,  137,   96,   97,   42,   81,
 /*    40 */    82,   83,   84,   85,   86,   87,   89,    4,  104,   83,
 /*    50 */    84,   85,   86,   87,  233,   59,   33,   34,   93,   59,
 /*    60 */    64,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*    70 */    81,   82,   83,   84,   85,   86,   87,   81,   82,   83,
 /*    80 */     4,   81,   82,  109,   88,   89,  112,  113,  114,   66,
 /*    90 */    67,   97,   96,   97,    9,  151,   96,    4,  104,  103,
 /*   100 */   104,   61,  106,  107,  130,   20,  106,  111,   45,    7,
 /*   110 */   175,  111,   96,   11,  118,  119,  120,  121,  175,  119,
 /*   120 */   120,  121,  106,  188,  110,  111,   33,   34,  193,  194,
 /*   130 */   134,  188,  136,  137,   32,   97,   96,   97,  142,  196,
 /*   140 */   197,   98,  104,  147,  148,  149,  150,  151,   83,  106,
 /*   150 */   154,  155,  124,  125,  126,   62,   63,   64,   65,   66,
 /*   160 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   23,
 /*   170 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   180 */    87,  135,  106,  107,  141,  175,  140,  124,  125,  126,
 /*   190 */    96,   98,  249,  258,  259,  252,    4,   97,  188,  106,
 /*   200 */   135,  138,  139,  193,  194,  140,   33,   34,   62,   63,
 /*   210 */    64,   65,   99,   40,   68,   69,   70,   71,   72,   73,
 /*   220 */    74,   75,  146,   77,   78,   79,   80,   81,   82,   83,
 /*   230 */    84,   85,   86,   87,  141,   62,   63,   64,   65,   66,
 /*   240 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   89,
 /*   250 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   260 */    87,    9,  175,  175,  104,  175,   97,  179,  258,  259,
 /*   270 */    99,  175,   20,  104,  106,  188,  188,  104,  188,  111,
 /*   280 */   184,  185,  175,   34,  188,   33,   34,  119,  120,  121,
 /*   290 */     4,  184,  185,  101,  134,  188,  136,  137,  106,  107,
 /*   300 */   210,   15,  156,  207,  158,  209,   61,  147,    4,  149,
 /*   310 */   150,   99,    4,   64,   62,   63,   64,   65,   66,   67,
 /*   320 */    68,   69,   70,   71,   72,   73,   74,   75,   42,   77,
 /*   330 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   340 */     4,   96,   97,  256,  111,   59,  256,   43,  186,  104,
 /*   350 */    64,  189,  190,  191,  162,   77,   78,   79,   80,   81,
 /*   360 */    82,   83,   84,   85,   86,   87,   97,   81,   82,   51,
 /*   370 */     4,   53,  123,  104,   88,   89,  111,   19,  129,   64,
 /*   380 */     4,  104,   96,   97,   99,    4,  175,   29,    4,  103,
 /*   390 */   104,  180,  106,  107,  129,  184,  185,  111,    4,  188,
 /*   400 */    81,   82,   87,   34,  100,  119,  120,  121,  100,  101,
 /*   410 */   106,  107,   58,   95,  106,  107,   33,   34,  175,  142,
 /*   420 */   134,    4,  136,  137,  109,  110,  111,  112,  113,  114,
 /*   430 */   115,  188,   15,  147,  148,  149,  150,  101,  119,  120,
 /*   440 */   154,  155,  106,  107,  129,   62,   63,   64,   65,   66,
 /*   450 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   42,
 /*   460 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   470 */    87,  105,  106,  107,    4,  109,   59,  101,  112,  113,
 /*   480 */   114,   64,  106,  107,  241,  101,    5,  106,  107,   96,
 /*   490 */   106,  107,  123,  117,  118,  101,  130,  161,   81,   82,
 /*   500 */   106,  107,  118,  175,  175,   88,   89,   26,   97,   28,
 /*   510 */    55,  183,  183,   96,   97,  104,  188,  188,    5,  165,
 /*   520 */   103,  104,  146,  106,  107,  196,  197,  133,  111,   48,
 /*   530 */   146,  218,  219,  152,  221,  175,  119,  120,  121,   26,
 /*   540 */   104,   28,   19,  107,   23,  217,  217,   24,  188,    4,
 /*   550 */   104,  134,   29,  136,  137,   97,  196,  197,   45,  230,
 /*   560 */   231,   48,  234,  235,  147,  110,  149,  150,   51,   97,
 /*   570 */    53,  154,  155,    4,  175,   61,  106,  107,  249,   30,
 /*   580 */   144,  145,    4,   62,   63,   64,   65,  188,  118,   68,
 /*   590 */    69,   70,   71,   72,   73,   74,   75,  151,   77,   78,
 /*   600 */    79,   80,   81,   82,   83,   84,   85,   86,   87,  249,
 /*   610 */    96,   97,   95,   64,   62,   63,   64,   65,  104,    4,
 /*   620 */    68,   69,   70,   71,   72,   73,   74,   75,    4,   77,
 /*   630 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   640 */     4,   89,    4,  189,  245,  100,  101,    4,    0,  189,
 /*   650 */     4,  106,  107,   71,   96,    4,  104,   72,   73,   74,
 /*   660 */    75,  175,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   670 */    85,   86,   87,   25,  188,  106,  159,  156,   96,  158,
 /*   680 */   203,  204,  196,  197,  106,  107,  117,  233,  211,   62,
 /*   690 */    63,   64,   65,  233,  116,   68,   69,   70,   71,   72,
 /*   700 */    73,   74,   75,  151,   77,   78,   79,   80,   81,   82,
 /*   710 */    83,   84,   85,   86,   87,   12,   50,   81,   82,   14,
 /*   720 */    54,  106,  107,  175,   97,  124,  125,  126,  242,  223,
 /*   730 */   106,  104,  104,  118,   91,  249,  188,   89,  232,  101,
 /*   740 */    35,  117,  106,  107,  106,  107,  110,  101,  133,  106,
 /*   750 */   107,   46,  106,  107,    4,  119,  120,  106,  107,  123,
 /*   760 */    97,  125,   86,   87,  118,   62,   63,   64,   65,  118,
 /*   770 */    38,   68,   69,   70,   71,   72,   73,   74,   75,  113,
 /*   780 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   790 */    87,  156,   89,  158,   62,   63,   64,   65,  160,   25,
 /*   800 */    68,   69,   70,   71,   72,   73,   74,   75,  104,   77,
 /*   810 */    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   820 */    97,   89,  274,   98,    4,  159,  122,  104,   62,   63,
 /*   830 */    64,   65,   96,  128,   68,   69,   70,   71,   72,   73,
 /*   840 */    74,   75,   97,   77,   78,   79,   80,   81,   82,   83,
 /*   850 */    84,   85,   86,   87,   23,  183,  106,  107,    4,   62,
 /*   860 */    63,   64,   65,   89,   98,   68,   69,   70,   71,   72,
 /*   870 */    73,   74,   75,  183,   77,   78,   79,   80,   81,   82,
 /*   880 */    83,   84,   85,   86,   87,  168,  169,  170,  171,  217,
 /*   890 */    97,  141,   98,   62,   63,   64,   65,  104,   96,   68,
 /*   900 */    69,   70,   71,   72,   73,   74,   75,  217,   77,   78,
 /*   910 */    79,   80,   81,   82,   83,   84,   85,   86,   87,  270,
 /*   920 */   271,  101,   62,   63,   64,   65,  106,  107,   68,   69,
 /*   930 */    70,   71,   72,   73,   74,   75,  177,   77,   78,   79,
 /*   940 */    80,   81,   82,   83,   84,   85,   86,   87,    4,  192,
 /*   950 */   193,  194,  132,   97,  157,  101,   62,   63,   64,   65,
 /*   960 */   106,  107,   68,   69,   70,   71,   72,   73,   74,   75,
 /*   970 */   175,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   980 */    86,   87,    4,  188,  119,  120,   62,   63,   64,   65,
 /*   990 */    23,   97,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1000 */   146,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*  1010 */    86,   87,   96,    4,  255,    4,  259,  157,  189,  190,
 /*  1020 */   191,   97,   62,   63,   64,   65,   97,   83,   68,   69,
 /*  1030 */    70,   71,   72,   73,   74,   75,  241,   77,   78,   79,
 /*  1040 */    80,   81,   82,   83,   84,   85,   86,   87,   97,   97,
 /*  1050 */   106,  107,   62,   63,   64,   65,  104,   97,   68,   69,
 /*  1060 */    70,   71,   72,   73,   74,   75,  104,   77,   78,   79,
 /*  1070 */    80,   81,   82,   83,   84,   85,   86,   87,    4,  175,
 /*  1080 */   102,  212,   23,  214,  106,  107,   97,   97,   62,   63,
 /*  1090 */    64,   65,  188,  104,   68,   69,   70,   71,   72,   73,
 /*  1100 */    74,   75,   91,   77,   78,   79,   80,   81,   82,   83,
 /*  1110 */    84,   85,   86,   87,   55,  106,  107,  106,  107,  156,
 /*  1120 */    62,   63,   64,   65,   98,  116,   68,   69,   70,   71,
 /*  1130 */    72,   73,   74,   75,   97,   77,   78,   79,   80,   81,
 /*  1140 */    82,   83,   84,   85,   86,   87,   97,   89,   89,  104,
 /*  1150 */    62,   63,   64,   65,  183,   13,   68,   69,   70,   71,
 /*  1160 */    72,   73,   74,   75,    4,   77,   78,   79,   80,   81,
 /*  1170 */    82,   83,   84,   85,   86,   87,  104,   89,  274,  105,
 /*  1180 */   106,  107,   13,   62,   63,   64,   65,   96,  217,   68,
 /*  1190 */    69,   70,   71,   72,   73,   74,   75,  250,   77,   78,
 /*  1200 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   30,
 /*  1210 */    62,   63,   64,   65,  267,    4,   68,   69,   70,   71,
 /*  1220 */    72,   73,   74,   75,   97,   77,   78,   79,   80,   81,
 /*  1230 */    82,   83,   84,   85,   86,   87,   63,   64,   65,   13,
 /*  1240 */     4,   68,   69,   70,   71,   72,   73,   74,   75,   97,
 /*  1250 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*  1260 */    87,    4,  144,  192,  193,  194,  106,  107,  175,   64,
 /*  1270 */    65,   99,   15,   68,   69,   70,   71,   72,   73,   74,
 /*  1280 */    75,  188,   77,   78,   79,   80,   81,   82,   83,   84,
 /*  1290 */    85,   86,   87,  133,   99,    4,   97,  175,  183,   42,
 /*  1300 */     8,  175,   10,  104,   12,  179,  167,  175,  170,  171,
 /*  1310 */   188,  172,   55,   21,  188,   23,   59,  106,  196,  197,
 /*  1320 */   188,   64,  183,    4,  183,   83,  123,    4,  196,  197,
 /*  1330 */   259,   55,  217,   41,  138,  139,   44,  101,   81,   82,
 /*  1340 */    48,   49,  106,  107,   52,   88,  143,   55,    4,   57,
 /*  1350 */     4,  104,  230,   96,   97,  216,  217,  183,  217,  175,
 /*  1360 */   103,   15,  175,  106,  107,   89,    4,  175,  111,    4,
 /*  1370 */    96,  249,  188,  183,  242,  188,  119,  120,  121,    4,
 /*  1380 */   188,  249,  243,  244,   92,  246,   94,   96,   42,   96,
 /*  1390 */   216,  217,  101,  175,  210,  138,  139,  106,  107,  163,
 /*  1400 */     4,   55,  210,   97,  135,   59,  188,  217,  269,  118,
 /*  1410 */    64,  154,  155,  104,   91,   96,    4,  243,  244,   17,
 /*  1420 */   246,  234,  235,  131,  133,  106,  107,   81,   82,  106,
 /*  1430 */   107,   97,    4,  175,   88,  144,  145,   97,  264,  265,
 /*  1440 */   256,  183,   96,   15,  100,  183,  188,   97,  256,  103,
 /*  1450 */   106,  107,  106,  107,  196,  197,  164,  111,   96,    4,
 /*  1460 */   175,  175,    4,  101,  175,  119,  120,  121,  106,  107,
 /*  1470 */    42,  106,  107,  188,  188,  217,    4,  188,  216,  217,
 /*  1480 */   118,  106,  107,  118,  138,  139,   38,   59,  230,    6,
 /*  1490 */    96,  175,   64,  118,  212,  133,  214,  101,    4,  210,
 /*  1500 */   154,  155,  106,  107,  188,  243,  244,  249,  246,   81,
 /*  1510 */    82,  146,  199,   55,  118,    4,   88,  175,  106,  107,
 /*  1520 */   235,  146,   38,    4,   96,   97,   15,  265,  195,  175,
 /*  1530 */   188,  103,    4,  175,  106,  107,  203,  179,   96,  111,
 /*  1540 */   218,  219,  188,  221,  132,  256,  188,  119,  120,  121,
 /*  1550 */   196,  197,    4,   42,   96,   97,  101,  241,   97,  101,
 /*  1560 */     4,  106,  107,  250,  106,  107,  175,   96,  175,  247,
 /*  1570 */    59,    4,  189,  118,   96,   64,  118,   38,  106,  188,
 /*  1580 */   108,  188,  154,  155,  230,  231,    4,  196,  197,  196,
 /*  1590 */   197,  133,   81,   82,  199,  101,  138,  139,    4,   88,
 /*  1600 */   106,  107,  175,  249,   96,  188,  179,   96,   97,   15,
 /*  1610 */   115,  129,  118,  196,  103,  188,  233,  106,  107,  103,
 /*  1620 */    98,  230,  111,  230,  231,  106,  107,   64,  175,  101,
 /*  1630 */   119,  120,  121,  250,  106,  107,   42,  123,  175,   91,
 /*  1640 */   249,  188,  249,  175,  175,  250,  118,  179,  175,  196,
 /*  1650 */   197,  188,   12,   59,  106,  107,  188,  188,   64,  196,
 /*  1660 */   197,  188,  106,  107,  175,  154,  155,  142,    4,  196,
 /*  1670 */   197,  175,  128,  106,  107,   81,   82,  188,   71,   71,
 /*  1680 */     4,  162,   88,  127,  188,  196,  197,  153,  106,  107,
 /*  1690 */    96,   15,  196,  197,   89,  175,  175,  103,  139,  179,
 /*  1700 */   106,  107,  249,   89,   22,  111,    4,  175,  188,  188,
 /*  1710 */   175,  144,  249,  119,  120,  121,   47,   39,   42,  104,
 /*  1720 */   188,  175,  249,  188,  175,  179,  144,   39,  196,  197,
 /*  1730 */   175,  196,  197,  159,  188,   59,   95,  188,  249,  123,
 /*  1740 */    64,  175,   96,  188,   93,  249,  175,  143,  154,  155,
 /*  1750 */   156,  196,  197,   96,  188,    4,  175,   81,   82,  188,
 /*  1760 */   179,  175,  175,  103,   88,  179,   15,  196,  197,  188,
 /*  1770 */   106,  107,   96,   97,  188,  188,  175,  175,  175,  103,
 /*  1780 */   179,  249,  106,  107,  249,   95,   97,  111,  175,  188,
 /*  1790 */   188,  188,    4,   42,   97,  119,  120,  121,  196,  197,
 /*  1800 */     4,  188,  100,   37,  249,  175,  175,    4,  106,  107,
 /*  1810 */    59,   15,  175,   36,  187,   64,  152,  174,  188,  188,
 /*  1820 */   249,  236,  175,  175,  175,  188,  196,  197,  250,  175,
 /*  1830 */   154,  155,   81,   82,  202,  188,  188,  188,   42,   88,
 /*  1840 */   175,  202,  188,  196,  197,  196,  197,   96,  271,  273,
 /*  1850 */    90,  249,  175,  188,  103,   59,  273,  106,  107,  174,
 /*  1860 */    64,  174,  111,    4,   49,  188,   60,  175,  175,  175,
 /*  1870 */   119,  120,  121,  196,  197,  174,  176,   81,   82,  249,
 /*  1880 */   188,  188,  188,  176,   88,  181,  178,  175,  196,  197,
 /*  1890 */   196,  197,   96,  104,  106,  107,  249,  182,  249,  103,
 /*  1900 */   188,  138,  106,  107,   56,  154,  155,  111,  175,  106,
 /*  1910 */   107,  175,  151,  148,  175,  119,  120,  121,  219,  149,
 /*  1920 */   225,  188,  226,  147,  188,  175,  249,  188,  150,  196,
 /*  1930 */   197,  175,  196,  197,  146,  196,  197,    4,  188,  228,
 /*  1940 */   227,  249,  175,  249,  188,  229,  196,  197,  175,  175,
 /*  1950 */   154,  155,  196,  197,  175,  188,   87,   64,  175,  175,
 /*  1960 */     4,  188,  188,  196,  197,  106,  107,  188,    4,  196,
 /*  1970 */   197,  188,  188,  175,  250,   96,  175,  118,  257,  196,
 /*  1980 */   197,  201,  249,  175,    4,  249,  188,  175,  249,  188,
 /*  1990 */    87,  175,  201,    4,  196,  197,  188,  196,  197,  249,
 /*  2000 */   188,  253,  175,  156,  188,  249,  175,  239,  196,  197,
 /*  2010 */    99,    4,  196,  197,    4,  188,  249,   99,  175,  188,
 /*  2020 */   175,  175,  249,  196,  197,  239,  221,  196,  197,  139,
 /*  2030 */   175,  188,  249,  188,  188,    4,  175,  198,  198,  106,
 /*  2040 */   107,  196,  197,  188,    4,  123,  175,  249,    4,  188,
 /*  2050 */   249,  196,  197,  175,    4,  206,  175,  196,  197,  188,
 /*  2060 */   175,  249,  106,  107,  100,  249,  188,  196,  197,  188,
 /*  2070 */   106,  107,    4,  188,  196,  197,  249,  196,  197,  175,
 /*  2080 */   249,  196,  197,    4,  175,    4,  106,  107,   31,  198,
 /*  2090 */   175,  122,  188,  160,  249,  106,  107,  188,  118,  200,
 /*  2100 */   196,  197,  175,  188,  249,  196,  197,  118,  198,  175,
 /*  2110 */   249,  196,  197,  106,  107,  188,  106,  107,  175,  163,
 /*  2120 */   249,  201,  188,  196,  197,  118,  198,  249,  118,  175,
 /*  2130 */   249,  188,  206,  198,  249,  175,  198,  106,  107,  196,
 /*  2140 */   197,  175,  188,  198,  239,  201,  106,  107,  188,  118,
 /*  2150 */   106,  107,  175,  249,  188,   99,  106,  107,  249,  175,
 /*  2160 */   175,  178,  118,  201,  249,  188,   99,  175,  100,  175,
 /*  2170 */   239,  178,  188,  188,  106,  107,  249,   99,  262,   27,
 /*  2180 */   188,  156,  188,   99,  263,  106,  107,  106,  107,  213,
 /*  2190 */   225,   62,  249,   99,   99,  248,   96,  178,  239,  213,
 /*  2200 */    99,  161,  152,  225,  178,   99,  239,   60,   99,   99,
 /*  2210 */   215,  215,  215,   99,  215,   99,   99,  266,  239,   18,
 /*  2220 */   239,  266,   99,   99,   99,  268,  239,   16,  222,  224,
 /*  2230 */   189,  152,  259,  152,  259,  199,  254,  199,  238,  204,
 /*  2240 */   208,  240,  200,  240,  240,  225,  173,  189,  189,  222,
 /*  2250 */   189,  260,  237,  220,  205,  209,  205,  214,  205,  261,
 /*  2260 */   251,  196,  272,   55,  275,  196,
};
#define YY_SHIFT_USE_DFLT (-103)
#define YY_SHIFT_COUNT (437)
#define YY_SHIFT_MIN   (-102)
#define YY_SHIFT_MAX   (2211)
static const short yy_shift_ofst[] = {
 /*     0 */   774, 1257, 1292, 1346, 1276, 1676, 1676, 1059,  417, 1594,
 /*    10 */  1751, 1751, 1751, 1458,  636,  636,  366,   -4,  286, 1511,
 /*    20 */  1428, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
 /*    30 */  1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
 /*    40 */  1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
 /*    50 */  1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1796, 1751,
 /*    60 */  1074, 1291,   63, 1074, 2050, 2050, 2050, 2050,  319,  319,
 /*    70 */  1472,   93, 1362, 1528, 1236,  854,  394, 1494, 1455, 1396,
 /*    80 */   646,  820,  304,  545, 2079, 2079, 2081,  249, 2079, 2068,
 /*    90 */  2050, 1472, 1196,  252,  252,  732,    0,  315,  376,  384,
 /*   100 */  1375, 1365,  336,  308,  638,  513,  192,  513,  615, 1964,
 /*   110 */  2044, 2040, 1956, 1788, 1160, 2031, 1702, 2010, 1933, 2007,
 /*   120 */  1664, 1989, 1980, 1859, 1519, 1412, 1344,  651,  578, 1556,
 /*   130 */   470,  944, 1582, 1567,   43,   43,   76,  750,   43,  381,
 /*   140 */  1319, 1009,  978,  666, 1548, 1323, 1011,  643, 1803, 1803,
 /*   150 */  1803, 1803, 1803, 1803, 1803,  648,  455, 2208, 2208, 2208,
 /*   160 */  2208, 2208, -103, -103,  173,  383,  383,  383,  383,  383,
 /*   170 */   383,  552,  -56,  521,  146,  703,  627, 1088, 1058, 1026,
 /*   180 */   990,  960,  924,  894,  860,  831,  797,  766, 1148, 1121,
 /*   190 */  1173, 1205, 1205,  -11,  585,  585,  585,  585,  278,  -42,
 /*   200 */   -26,  168,  168,  -34,  514,  245,  705,  705,  705,  436,
 /*   210 */   481,   23, -102,  601,  102,  624,  569,   16,   65,  523,
 /*   220 */   446,  549,  549,  704, 1199,  369,   85,  549, 1203,  635,
 /*   230 */    85,  865,  865,  676, 1211,  277,   46, 2211, 2125, 2124,
 /*   240 */  2123, 2201, 2201, 2117, 2116, 2147, 2114, 2147, 2110, 2147,
 /*   250 */  2109, 2147, 2106, 1806, 1761, 2101, 1806, 2129, 2100, 2095,
 /*   260 */  2094, 2129, 1761, 2084, 2025, 2152, 2078, 1806, 2067, 1879,
 /*   270 */  1806, 2056, 1879, 1922, 1922, 1922, 1922, 2057, 1879, 1922,
 /*   280 */  1969, 1922, 2057, 1922, 1922, 1890, 1918, 1911, 1847, 1879,
 /*   290 */  1903, 1879, 1893, 1869, 1778, 1776, 1770, 1765, 1761, 1763,
 /*   300 */  1848, 1789, 1806, 1815, 1815, 1760, 1760, 1760, 1760, -103,
 /*   310 */  -103, -103, -103, -103, -103, -103, -103, -103, -103,  160,
 /*   320 */   517,   40,  -60,   28,  318,  354,  582,  989,  952,  793,
 /*   330 */   723,  411,   14,  358,  265,  269,  169,   38,   -6,  -93,
 /*   340 */  1777, 1766, 1651, 1690, 1697, 1689, 1660, 1657, 1604, 1641,
 /*   350 */  1646, 1616, 1574, 1688, 1615, 1678, 1669, 1682, 1614, 1605,
 /*   360 */  1559, 1534, 1608, 1607, 1544, 1525, 1640, 1514, 1522, 1516,
 /*   370 */  1563, 1482, 1495, 1508, 1539, 1478, 1471, 1461, 1442, 1484,
 /*   380 */  1483, 1394, 1448, 1402, 1350, 1340, 1334, 1309, 1247, 1269,
 /*   390 */  1293, 1306, 1274, 1247, 1242, 1195, 1172, 1118, 1152, 1127,
 /*   400 */  1179, 1226, 1091, 1045, 1169, 1072, 1142, 1045, 1049, 1037,
 /*   410 */   963,  951,  962,  929,  916,  967,  856,  802,  794,  628,
 /*   420 */   745,  736,  725,  628,  663,  558,  472,  458,  393,  233,
 /*   430 */   285,  212,  171,  113,   94,  100,  -35,  -43,
};
#define YY_REDUCE_USE_DFLT (-180)
#define YY_REDUCE_COUNT (318)
#define YY_REDUCE_MIN   (-179)
#define YY_REDUCE_MAX   (2073)
static const short yy_reduce_ofst[] = {
 /*     0 */   717,  329, 1139, 1258, 1174, 1393, 1354, 1262, 1391,  -57,
 /*    10 */  1132, 1122,  486,  328,   10,  -65,   96, 1943, 1927, 1915,
 /*    20 */  1909, 1904, 1885, 1881, 1878, 1871, 1861, 1855, 1845, 1831,
 /*    30 */  1827, 1816, 1812, 1801, 1798, 1783, 1773, 1767, 1756, 1750,
 /*    40 */  1739, 1736, 1733, 1694, 1692, 1677, 1649, 1647, 1630, 1602,
 /*    50 */  1571, 1555, 1535, 1532, 1496, 1489, 1473, 1463, 1453,  360,
 /*    60 */   211, 1187, 1322,  107, 1289, 1192, 1184,   90, 1071,  757,
 /*    70 */   162, 1383, 1285, 1601, 1586, 1581, 1546, 1520, 1468, 1427,
 /*    80 */  1358, 1126,  904,   88, 1316,  795,  399,  477,  243,  548,
 /*    90 */    87,  829,  313, 1395, 1313,  947, 1417, 1333, 1994, 1992,
 /*   100 */  1469, 1469, 1985, 1984, 1977, 1282, 1966,  869, 1469, 1960,
 /*   110 */  1469, 1469, 1469, 1469, 1469, 1469, 1469, 1954, 1469, 1469,
 /*   120 */  1934, 1469, 1469, 1846, 1469, 1469, 1469, 1843, 1808, 1784,
 /*   130 */  1779, 1093, 1774, 1712,  460,  454, 1693, 1665, -179, 1654,
 /*   140 */  1648, 1637, 1631,  759, 1613, 1603, 1587, 1566, 1549, 1521,
 /*   150 */  1469, 1342, 1286, 1218, 1093, 1138, 1190, 1141, 1115,  971,
 /*   160 */   690,  672,  649,  506, 1578, 1578, 1578, 1578, 1578, 1578,
 /*   170 */  1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
 /*   180 */  1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
 /*   190 */  1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
 /*   200 */  2046, 2069, 2065, 1578, 1990, 1990, 2053, 2051, 2049, 2015,
 /*   210 */  2043, 2009, 2033, 1998, 1991, 2061, 2059, 2058, 2027, 2073,
 /*   220 */  2020, 2004, 2003, 2042, 2032, 2035, 2038, 2001, 2000, 1982,
 /*   230 */  2036, 1975, 1973, 1578, 2041, 2005, 2006, 1957, 1905, 1987,
 /*   240 */  1981, 1955, 1951, 1979, 1905, 1999, 1905, 1997, 1905, 1996,
 /*   250 */  1905, 1995, 1967, 2026, 1978, 1959, 2019, 1986, 1947, 1905,
 /*   260 */  1905, 1976, 1965, 1905, 1921, 1916, 1931, 1993, 1905, 1962,
 /*   270 */  1983, 1905, 1944, 1945, 1938, 1935, 1928, 1926, 1920, 1910,
 /*   280 */  1899, 1891, 1849, 1840, 1839, 1805, 1786, 1768, 1748, 1791,
 /*   290 */  1721, 1780, 1724, 1578, 1716, 1711, 1713, 1696, 1695, 1699,
 /*   300 */  1715, 1704, 1708, 1707, 1700, 1701, 1687, 1685, 1643, 1583,
 /*   310 */  1576, 1577, 1639, 1632, 1585, 1578, 1578, 1578, 1627,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   726, 1011, 1128, 1011, 1128, 1011, 1011, 1128, 1011, 1011,
 /*    10 */  1011, 1011, 1011,  897, 1134, 1134, 1134, 1011, 1011, 1011,
 /*    20 */  1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
 /*    30 */  1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
 /*    40 */  1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
 /*    50 */  1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
 /*    60 */  1134,  891, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
 /*    70 */   771,  887,  897, 1134, 1134, 1134, 1134, 1134,  959,  946,
 /*    80 */   937, 1134, 1134, 1134,  969,  969,  952,  839,  969, 1134,
 /*    90 */  1134, 1134, 1134,  925,  925, 1013, 1134,  763, 1098, 1103,
 /*   100 */  1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,  898, 1134,
 /*   110 */  1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,  960,
 /*   120 */   953,  947,  938, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
 /*   130 */  1134, 1134, 1134, 1134,  887,  887, 1134, 1134,  887, 1134,
 /*   140 */  1134, 1134, 1134,  760, 1134, 1134, 1134,  732, 1044, 1134,
 /*   150 */  1134, 1134, 1134, 1134, 1134,  726, 1128, 1128, 1128, 1128,
 /*   160 */  1128, 1128, 1121,  877,  932,  903,  942,  930,  934, 1024,
 /*   170 */   933, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
 /*   180 */  1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
 /*   190 */   986,  998,  985,  993, 1002,  997,  994,  988,  987,  989,
 /*   200 */  1134, 1134, 1134,  990, 1134, 1134, 1134, 1134, 1134,  890,
 /*   210 */  1134, 1134,  861, 1134, 1072, 1134, 1134,  773,  875,  735,
 /*   220 */   941,  915,  915,  806,  830,  795,  925,  915,  905, 1019,
 /*   230 */   925, 1134, 1134,  991, 1134,  888,  875, 1112,  906,  906,
 /*   240 */   906, 1097, 1097,  906,  906,  852,  906,  852,  906,  852,
 /*   250 */   906,  852,  906,  757,  941,  906,  757,  843,  965,  906,
 /*   260 */   906,  843,  941,  906, 1079, 1077,  906,  757,  906, 1032,
 /*   270 */   757,  906, 1032,  841,  841,  841,  841,  822, 1032,  841,
 /*   280 */   806,  841,  822,  841,  841, 1134,  906,  906, 1134, 1032,
 /*   290 */  1038, 1032, 1013,  992,  931,  919,  929,  926,  941, 1134,
 /*   300 */   754,  825,  757,  743,  743,  731,  731,  731,  731, 1125,
 /*   310 */  1125, 1121,  808,  808,  893, 1001, 1000,  999,  782, 1012,
 /*   320 */  1134, 1134, 1134, 1134, 1134, 1134, 1046, 1134, 1134, 1134,
 /*   330 */  1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
 /*   340 */  1134,  727, 1134, 1134, 1134, 1134, 1134, 1115, 1134, 1134,
 /*   350 */  1134, 1134, 1134, 1134, 1076, 1075, 1134, 1134, 1134, 1134,
 /*   360 */  1134, 1134, 1134, 1134, 1134, 1134, 1064, 1134, 1134, 1134,
 /*   370 */  1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
 /*   380 */  1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,  864,  866,
 /*   390 */  1134, 1134, 1134,  865, 1134, 1134, 1134, 1134, 1134, 1134,
 /*   400 */  1134, 1134, 1134,  927, 1134,  920, 1134, 1022, 1134, 1134,
 /*   410 */  1012, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1130,
 /*   420 */  1134, 1134, 1134, 1129, 1134, 1134, 1134, 1134, 1134, 1014,
 /*   430 */   977, 1134,  976,  975,  766, 1134,  741, 1134,  723,  728,
 /*   440 */  1114, 1111, 1113, 1108, 1109, 1107, 1110, 1106, 1104, 1105,
 /*   450 */  1102, 1100, 1099, 1101, 1096, 1092, 1052, 1050, 1048, 1057,
 /*   460 */  1056, 1055, 1054, 1053, 1049, 1047, 1051, 1045,  956,  944,
 /*   470 */   935,  859, 1091, 1089, 1090, 1043, 1041, 1042,  858,  857,
 /*   480 */   856,  851,  850,  849,  848, 1118, 1127, 1126, 1124, 1123,
 /*   490 */  1122, 1116, 1117, 1030, 1029, 1027, 1026, 1028,  759, 1068,
 /*   500 */  1071, 1070, 1069, 1074, 1073, 1066, 1078, 1083, 1082, 1087,
 /*   510 */  1086, 1085, 1084, 1081, 1063,  964,  963,  961,  966,  958,
 /*   520 */   957,  962,  949,  955,  954,  945,  948,  844,  940,  936,
 /*   530 */   939,  860, 1067,  855,  854,  853,  758,  753,  908,  752,
 /*   540 */   751,  762,  828,  829,  837,  840,  835,  838,  834,  833,
 /*   550 */   832,  836,  831,  827,  765,  764,  772,  821,  799,  797,
 /*   560 */   796,  800,  813,  812,  819,  818,  817,  816,  815,  811,
 /*   570 */   814,  810,  809,  801,  794,  793,  807,  792,  824,  823,
 /*   580 */   820,  791,  847,  846,  845,  842,  790,  789,  788,  787,
 /*   590 */   786,  785,  983,  982, 1004,  984,  974,  862,  869,  868,
 /*   600 */   867,  871,  872,  882,  880,  879,  878,  914,  913,  912,
 /*   610 */   911,  910,  909,  902,  900,  896,  895,  901,  899,  917,
 /*   620 */   918,  916,  894,  886,  884,  885,  883,  971,  968,  970,
 /*   630 */   967,  904,  892,  889,  876,  922,  921, 1015, 1006,  907,
 /*   640 */  1005, 1003, 1014, 1012, 1088, 1010, 1009, 1008, 1133, 1131,
 /*   650 */  1132, 1035, 1037, 1040, 1039, 1036,  924,  923, 1034, 1033,
 /*   660 */  1007,  981,  778,  776,  777, 1060, 1059, 1062, 1061, 1058,
 /*   670 */   780,  779,  775,  774,  996,  995,  979,  978,  980,  767,
 /*   680 */   870,  863,  973,  972,  805,  804,  803,  802,  874,  873,
 /*   690 */   784,  798,  783,  781,  761,  756,  755,  750,  748,  745,
 /*   700 */   747,  744,  749,  746,  742,  740,  739,  738,  737,  736,
 /*   710 */   770,  769,  768,  766,  734,  733,  730,  729,  725,  724,
 /*   720 */   722,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*        FOR => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /*         NO => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*     PRAGMA => ID */
    4,  /*      RAISE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*    TRIGGER => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ANALYZE",       "ASC",           "ATTACH",        "BEFORE",      
  "BEGIN",         "BY",            "CASCADE",       "CAST",        
  "COLUMNKW",      "CONFLICT",      "DATABASE",      "DEFERRED",    
  "DESC",          "DETACH",        "EACH",          "END",         
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FOR",         
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LIKE_KW",       "MATCH",         "NO",          
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PRAGMA",        "RAISE",         "RECURSIVE",   
  "RELEASE",       "REPLACE",       "RESTRICT",      "ROW",         
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TRIGGER",     
  "VACUUM",        "VIEW",          "VIRTUAL",       "WITH",        
  "WITHOUT",       "REINDEX",       "RENAME",        "CTIME_KW",    
  "IF",            "ANY",           "OR",            "AND",         
  "NOT",           "IS",            "BETWEEN",       "IN",          
  "ISNULL",        "NOTNULL",       "NE",            "EQ",          
  "GT",            "LE",            "LT",            "GE",          
  "ESCAPE",        "BITAND",        "BITOR",         "LSHIFT",      
  "RSHIFT",        "PLUS",          "MINUS",         "STAR",        
  "SLASH",         "REM",           "CONCAT",        "COLLATE",     
  "BITNOT",        "SEMI",          "TRANSACTION",   "ID_TRANS",    
  "COMMIT",        "TO",            "CREATE",        "TABLE",       
  "LP",            "RP",            "AS",            "DOT",         
  "ID_TAB_NEW",    "ID_DB",         "CTX_ROWID_KW",  "EXISTS",      
  "COMMA",         "ID_COL_NEW",    "STRING",        "JOIN_KW",     
  "ID_COL_TYPE",   "CONSTRAINT",    "DEFAULT",       "NULL",        
  "PRIMARY",       "UNIQUE",        "CHECK",         "REFERENCES",  
  "ID_CONSTR",     "ID_COLLATE",    "ID_TAB",        "INTEGER",     
  "FLOAT",         "BLOB",          "AUTOINCR",      "ON",          
  "INSERT",        "DELETE",        "UPDATE",        "ID_FK_MATCH", 
  "SET",           "DEFERRABLE",    "FOREIGN",       "DROP",        
  "ID_VIEW_NEW",   "ID_VIEW",       "UNION",         "ALL",         
  "EXCEPT",        "INTERSECT",     "SELECT",        "VALUES",      
  "DISTINCT",      "ID_ALIAS",      "FROM",          "USING",       
  "JOIN",          "ID_JOIN_OPTS",  "ID_IDX",        "ORDER",       
  "GROUP",         "HAVING",        "LIMIT",         "WHERE",       
  "ID_COL",        "INTO",          "VARIABLE",      "CASE",        
  "WHEN",          "THEN",          "ELSE",          "INDEX",       
  "ID_IDX_NEW",    "ID_PRAGMA",     "ID_TRIG_NEW",   "ID_TRIG",     
  "ALTER",         "ADD",           "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "column",        "columnid",      "type",          "carglist",    
  "id",            "ids",           "typetoken",     "typename",    
  "signed",        "plus_num",      "minus_num",     "ccons",       
  "term",          "expr",          "onconf",        "sortorder",   
  "autoinc",       "idxlist_opt",   "refargs",       "defer_subclause",
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "with",          "selectnowith",  "oneselect",   
  "multiselect_op",  "values",        "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "nexprlist",     "exprlist",    
  "sclp",          "as",            "joinsrc",       "singlesrc",   
  "seltablist",    "joinop",        "joinconstr_opt",  "dbnm",        
  "indexed_opt",   "inscollist",    "sortlist",      "delete_stmt", 
  "update_stmt",   "setlist",       "insert_stmt",   "insert_cmd",  
  "inscollist_opt",  "exprx",         "not_opt",       "likeop",      
  "case_operand",  "case_exprlist",  "case_else",     "uniqueflag",  
  "idxlist_single",  "collate",       "nmnum",         "number",      
  "trigger_time",  "trigger_event",  "foreach_clause",  "when_clause", 
  "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",  "key_opt",     
  "kwcolumn_opt",  "create_vtab",   "vtabarglist",   "vtabarg",     
  "vtabargtoken",  "anylist",       "wqlist",      
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= WITHOUT nm",
 /*  35 */ "table_options ::= WITHOUT CTX_ROWID_KW",
 /*  36 */ "ifnotexists ::=",
 /*  37 */ "ifnotexists ::= IF NOT EXISTS",
 /*  38 */ "temp ::= TEMP",
 /*  39 */ "temp ::=",
 /*  40 */ "columnlist ::= columnlist COMMA column",
 /*  41 */ "columnlist ::= column",
 /*  42 */ "column ::= columnid type carglist",
 /*  43 */ "columnid ::= nm",
 /*  44 */ "columnid ::= ID_COL_NEW",
 /*  45 */ "id ::= ID",
 /*  46 */ "ids ::= ID|STRING",
 /*  47 */ "nm ::= id",
 /*  48 */ "nm ::= STRING",
 /*  49 */ "nm ::= JOIN_KW",
 /*  50 */ "type ::=",
 /*  51 */ "type ::= typetoken",
 /*  52 */ "typetoken ::= typename",
 /*  53 */ "typetoken ::= typename LP signed RP",
 /*  54 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  55 */ "typename ::= ids",
 /*  56 */ "typename ::= typename ids",
 /*  57 */ "typename ::= ID_COL_TYPE",
 /*  58 */ "signed ::= plus_num",
 /*  59 */ "signed ::= minus_num",
 /*  60 */ "carglist ::= carglist ccons",
 /*  61 */ "carglist ::=",
 /*  62 */ "ccons ::= CONSTRAINT nm",
 /*  63 */ "ccons ::= DEFAULT term",
 /*  64 */ "ccons ::= DEFAULT LP expr RP",
 /*  65 */ "ccons ::= DEFAULT PLUS term",
 /*  66 */ "ccons ::= DEFAULT MINUS term",
 /*  67 */ "ccons ::= DEFAULT id",
 /*  68 */ "ccons ::= DEFAULT CTIME_KW",
 /*  69 */ "ccons ::= NULL onconf",
 /*  70 */ "ccons ::= NOT NULL onconf",
 /*  71 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  72 */ "ccons ::= UNIQUE onconf",
 /*  73 */ "ccons ::= CHECK LP expr RP",
 /*  74 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  75 */ "ccons ::= defer_subclause",
 /*  76 */ "ccons ::= COLLATE ids",
 /*  77 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  78 */ "ccons ::= COLLATE ID_COLLATE",
 /*  79 */ "ccons ::= REFERENCES ID_TAB",
 /*  80 */ "ccons ::= CHECK LP RP",
 /*  81 */ "term ::= NULL",
 /*  82 */ "term ::= INTEGER",
 /*  83 */ "term ::= FLOAT",
 /*  84 */ "term ::= STRING|BLOB",
 /*  85 */ "autoinc ::=",
 /*  86 */ "autoinc ::= AUTOINCR",
 /*  87 */ "refargs ::=",
 /*  88 */ "refargs ::= refargs refarg",
 /*  89 */ "refarg ::= MATCH nm",
 /*  90 */ "refarg ::= ON INSERT refact",
 /*  91 */ "refarg ::= ON DELETE refact",
 /*  92 */ "refarg ::= ON UPDATE refact",
 /*  93 */ "refarg ::= MATCH ID_FK_MATCH",
 /*  94 */ "refact ::= SET NULL",
 /*  95 */ "refact ::= SET DEFAULT",
 /*  96 */ "refact ::= CASCADE",
 /*  97 */ "refact ::= RESTRICT",
 /*  98 */ "refact ::= NO ACTION",
 /*  99 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 100 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 101 */ "init_deferred_pred_opt ::=",
 /* 102 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 103 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 104 */ "conslist_opt ::=",
 /* 105 */ "conslist_opt ::= COMMA conslist",
 /* 106 */ "conslist ::= conslist tconscomma tcons",
 /* 107 */ "conslist ::= tcons",
 /* 108 */ "tconscomma ::= COMMA",
 /* 109 */ "tconscomma ::=",
 /* 110 */ "tcons ::= CONSTRAINT nm",
 /* 111 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 112 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 113 */ "tcons ::= CHECK LP expr RP onconf",
 /* 114 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 115 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 116 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 117 */ "tcons ::= CHECK LP RP onconf",
 /* 118 */ "defer_subclause_opt ::=",
 /* 119 */ "defer_subclause_opt ::= defer_subclause",
 /* 120 */ "onconf ::=",
 /* 121 */ "onconf ::= ON CONFLICT resolvetype",
 /* 122 */ "orconf ::=",
 /* 123 */ "orconf ::= OR resolvetype",
 /* 124 */ "resolvetype ::= raisetype",
 /* 125 */ "resolvetype ::= IGNORE",
 /* 126 */ "resolvetype ::= REPLACE",
 /* 127 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 128 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 129 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 130 */ "ifexists ::= IF EXISTS",
 /* 131 */ "ifexists ::=",
 /* 132 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 133 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 134 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 135 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 136 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 137 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 138 */ "cmd ::= select_stmt",
 /* 139 */ "select_stmt ::= select",
 /* 140 */ "select ::= with selectnowith",
 /* 141 */ "selectnowith ::= oneselect",
 /* 142 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 143 */ "selectnowith ::= values",
 /* 144 */ "selectnowith ::= selectnowith COMMA values",
 /* 145 */ "multiselect_op ::= UNION",
 /* 146 */ "multiselect_op ::= UNION ALL",
 /* 147 */ "multiselect_op ::= EXCEPT",
 /* 148 */ "multiselect_op ::= INTERSECT",
 /* 149 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 150 */ "values ::= VALUES LP nexprlist RP",
 /* 151 */ "values ::= values COMMA LP exprlist RP",
 /* 152 */ "distinct ::= DISTINCT",
 /* 153 */ "distinct ::= ALL",
 /* 154 */ "distinct ::=",
 /* 155 */ "sclp ::= selcollist COMMA",
 /* 156 */ "sclp ::=",
 /* 157 */ "selcollist ::= sclp expr as",
 /* 158 */ "selcollist ::= sclp STAR",
 /* 159 */ "selcollist ::= sclp nm DOT STAR",
 /* 160 */ "selcollist ::= sclp",
 /* 161 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 162 */ "as ::= AS nm",
 /* 163 */ "as ::= ids",
 /* 164 */ "as ::= AS ID_ALIAS",
 /* 165 */ "as ::= ID_ALIAS",
 /* 166 */ "as ::=",
 /* 167 */ "from ::=",
 /* 168 */ "from ::= FROM joinsrc",
 /* 169 */ "joinsrc ::= singlesrc seltablist",
 /* 170 */ "joinsrc ::=",
 /* 171 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 172 */ "seltablist ::=",
 /* 173 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 174 */ "singlesrc ::= LP select RP as",
 /* 175 */ "singlesrc ::= LP joinsrc RP as",
 /* 176 */ "singlesrc ::=",
 /* 177 */ "singlesrc ::= nm DOT",
 /* 178 */ "singlesrc ::= nm DOT ID_TAB",
 /* 179 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 180 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 181 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 182 */ "joinconstr_opt ::= ON expr",
 /* 183 */ "joinconstr_opt ::= USING LP inscollist RP",
 /* 184 */ "joinconstr_opt ::=",
 /* 185 */ "dbnm ::=",
 /* 186 */ "dbnm ::= DOT nm",
 /* 187 */ "fullname ::= nm dbnm",
 /* 188 */ "joinop ::= COMMA",
 /* 189 */ "joinop ::= JOIN",
 /* 190 */ "joinop ::= JOIN_KW JOIN",
 /* 191 */ "joinop ::= JOIN_KW nm JOIN",
 /* 192 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 193 */ "joinop ::= ID_JOIN_OPTS",
 /* 194 */ "indexed_opt ::=",
 /* 195 */ "indexed_opt ::= INDEXED BY nm",
 /* 196 */ "indexed_opt ::= NOT INDEXED",
 /* 197 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 198 */ "orderby_opt ::=",
 /* 199 */ "orderby_opt ::= ORDER BY sortlist",
 /* 200 */ "sortlist ::= sortlist COMMA expr sortorder",
 /* 201 */ "sortlist ::= expr sortorder",
 /* 202 */ "sortorder ::= ASC",
 /* 203 */ "sortorder ::= DESC",
 /* 204 */ "sortorder ::=",
 /* 205 */ "groupby_opt ::=",
 /* 206 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 207 */ "groupby_opt ::= GROUP BY",
 /* 208 */ "having_opt ::=",
 /* 209 */ "having_opt ::= HAVING expr",
 /* 210 */ "limit_opt ::=",
 /* 211 */ "limit_opt ::= LIMIT expr",
 /* 212 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 213 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 214 */ "cmd ::= delete_stmt",
 /* 215 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt",
 /* 216 */ "delete_stmt ::= with DELETE FROM",
 /* 217 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 218 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 219 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 220 */ "where_opt ::=",
 /* 221 */ "where_opt ::= WHERE expr",
 /* 222 */ "where_opt ::= WHERE",
 /* 223 */ "cmd ::= update_stmt",
 /* 224 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist where_opt",
 /* 225 */ "update_stmt ::= with UPDATE orconf",
 /* 226 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 227 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 228 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 229 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 230 */ "setlist ::= nm EQ expr",
 /* 231 */ "setlist ::=",
 /* 232 */ "setlist ::= setlist COMMA",
 /* 233 */ "setlist ::= setlist COMMA ID_COL",
 /* 234 */ "setlist ::= ID_COL",
 /* 235 */ "cmd ::= insert_stmt",
 /* 236 */ "insert_stmt ::= with insert_cmd INTO fullname inscollist_opt select",
 /* 237 */ "insert_stmt ::= with insert_cmd INTO fullname inscollist_opt DEFAULT VALUES",
 /* 238 */ "insert_stmt ::= with insert_cmd INTO",
 /* 239 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 240 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 241 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 242 */ "insert_cmd ::= INSERT orconf",
 /* 243 */ "insert_cmd ::= REPLACE",
 /* 244 */ "inscollist_opt ::=",
 /* 245 */ "inscollist_opt ::= LP inscollist RP",
 /* 246 */ "inscollist ::= inscollist COMMA nm",
 /* 247 */ "inscollist ::= nm",
 /* 248 */ "inscollist ::=",
 /* 249 */ "inscollist ::= inscollist COMMA ID_COL",
 /* 250 */ "inscollist ::= ID_COL",
 /* 251 */ "exprx ::= term",
 /* 252 */ "exprx ::= CTIME_KW",
 /* 253 */ "exprx ::= LP expr RP",
 /* 254 */ "exprx ::= id",
 /* 255 */ "exprx ::= JOIN_KW",
 /* 256 */ "exprx ::= nm DOT nm",
 /* 257 */ "exprx ::= nm DOT nm DOT nm",
 /* 258 */ "exprx ::= VARIABLE",
 /* 259 */ "exprx ::= expr COLLATE ids",
 /* 260 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 261 */ "exprx ::= ID LP distinct exprlist RP",
 /* 262 */ "exprx ::= ID LP STAR RP",
 /* 263 */ "exprx ::= LP nexprlist COMMA expr RP",
 /* 264 */ "exprx ::= expr AND expr",
 /* 265 */ "exprx ::= expr OR expr",
 /* 266 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 267 */ "exprx ::= expr EQ|NE expr",
 /* 268 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 269 */ "exprx ::= expr PLUS|MINUS expr",
 /* 270 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 271 */ "exprx ::= expr CONCAT expr",
 /* 272 */ "exprx ::= expr not_opt likeop expr",
 /* 273 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 274 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 275 */ "exprx ::= expr NOT NULL",
 /* 276 */ "exprx ::= expr IS not_opt expr",
 /* 277 */ "exprx ::= NOT expr",
 /* 278 */ "exprx ::= BITNOT expr",
 /* 279 */ "exprx ::= MINUS expr",
 /* 280 */ "exprx ::= PLUS expr",
 /* 281 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 282 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 283 */ "exprx ::= LP select RP",
 /* 284 */ "exprx ::= expr not_opt IN LP select RP",
 /* 285 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 286 */ "exprx ::= EXISTS LP select RP",
 /* 287 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 288 */ "exprx ::= RAISE LP IGNORE RP",
 /* 289 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 290 */ "expr ::=",
 /* 291 */ "expr ::= exprx",
 /* 292 */ "not_opt ::=",
 /* 293 */ "not_opt ::= NOT",
 /* 294 */ "likeop ::= LIKE_KW|MATCH",
 /* 295 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 296 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 297 */ "case_else ::= ELSE expr",
 /* 298 */ "case_else ::=",
 /* 299 */ "case_operand ::= exprx",
 /* 300 */ "case_operand ::=",
 /* 301 */ "exprlist ::= nexprlist",
 /* 302 */ "exprlist ::=",
 /* 303 */ "nexprlist ::= nexprlist COMMA expr",
 /* 304 */ "nexprlist ::= exprx",
 /* 305 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 306 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 307 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 308 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 309 */ "uniqueflag ::= UNIQUE",
 /* 310 */ "uniqueflag ::=",
 /* 311 */ "idxlist_opt ::=",
 /* 312 */ "idxlist_opt ::= LP idxlist RP",
 /* 313 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 314 */ "idxlist ::= idxlist_single",
 /* 315 */ "idxlist_single ::= nm collate sortorder",
 /* 316 */ "idxlist_single ::= ID_COL",
 /* 317 */ "collate ::=",
 /* 318 */ "collate ::= COLLATE ids",
 /* 319 */ "collate ::= COLLATE ID_COLLATE",
 /* 320 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 321 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 322 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 323 */ "cmd ::= VACUUM",
 /* 324 */ "cmd ::= VACUUM nm",
 /* 325 */ "cmd ::= PRAGMA nm dbnm",
 /* 326 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 327 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 328 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 329 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 330 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 331 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 332 */ "nmnum ::= plus_num",
 /* 333 */ "nmnum ::= nm",
 /* 334 */ "nmnum ::= ON",
 /* 335 */ "nmnum ::= DELETE",
 /* 336 */ "nmnum ::= DEFAULT",
 /* 337 */ "plus_num ::= PLUS number",
 /* 338 */ "plus_num ::= number",
 /* 339 */ "minus_num ::= MINUS number",
 /* 340 */ "number ::= INTEGER",
 /* 341 */ "number ::= FLOAT",
 /* 342 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 343 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 344 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 345 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 346 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 347 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 348 */ "trigger_time ::= BEFORE",
 /* 349 */ "trigger_time ::= AFTER",
 /* 350 */ "trigger_time ::= INSTEAD OF",
 /* 351 */ "trigger_time ::=",
 /* 352 */ "trigger_event ::= DELETE",
 /* 353 */ "trigger_event ::= INSERT",
 /* 354 */ "trigger_event ::= UPDATE",
 /* 355 */ "trigger_event ::= UPDATE OF inscollist",
 /* 356 */ "foreach_clause ::=",
 /* 357 */ "foreach_clause ::= FOR EACH ROW",
 /* 358 */ "when_clause ::=",
 /* 359 */ "when_clause ::= WHEN expr",
 /* 360 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 361 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 362 */ "trigger_cmd_list ::= SEMI",
 /* 363 */ "trigger_cmd ::= update_stmt",
 /* 364 */ "trigger_cmd ::= insert_stmt",
 /* 365 */ "trigger_cmd ::= delete_stmt",
 /* 366 */ "trigger_cmd ::= select_stmt",
 /* 367 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 368 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 369 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 370 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 371 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 372 */ "cmd ::= DETACH database_kw_opt expr",
 /* 373 */ "key_opt ::=",
 /* 374 */ "key_opt ::= KEY expr",
 /* 375 */ "database_kw_opt ::= DATABASE",
 /* 376 */ "database_kw_opt ::=",
 /* 377 */ "cmd ::= REINDEX",
 /* 378 */ "cmd ::= REINDEX nm dbnm",
 /* 379 */ "cmd ::= REINDEX ID_COLLATE",
 /* 380 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 381 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 382 */ "cmd ::= ANALYZE",
 /* 383 */ "cmd ::= ANALYZE nm dbnm",
 /* 384 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 385 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 386 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 387 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 388 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 389 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 390 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 391 */ "kwcolumn_opt ::=",
 /* 392 */ "kwcolumn_opt ::= COLUMNKW",
 /* 393 */ "cmd ::= create_vtab",
 /* 394 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 395 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 396 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 397 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 398 */ "vtabarglist ::= vtabarg",
 /* 399 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 400 */ "vtabarg ::=",
 /* 401 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 402 */ "vtabargtoken ::= ANY",
 /* 403 */ "vtabargtoken ::= LP anylist RP",
 /* 404 */ "anylist ::=",
 /* 405 */ "anylist ::= anylist LP anylist RP",
 /* 406 */ "anylist ::= anylist ANY",
 /* 407 */ "with ::=",
 /* 408 */ "with ::= WITH wqlist",
 /* 409 */ "with ::= WITH RECURSIVE wqlist",
 /* 410 */ "wqlist ::= nm idxlist_opt AS LP select RP",
 /* 411 */ "wqlist ::= wqlist COMMA nm idxlist_opt AS LP select RP",
 /* 412 */ "wqlist ::= ID_TAB_NEW",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 167: /* cmd */
    case 170: /* ecmd */
    case 172: /* cmdx */
    case 216: /* select_stmt */
    case 243: /* delete_stmt */
    case 244: /* update_stmt */
    case 246: /* insert_stmt */
    case 265: /* trigger_cmd */
    case 269: /* create_vtab */
{
delete (yypminor->yy113);
}
      break;
    case 171: /* explain */
{
delete (yypminor->yy511);
}
      break;
    case 173: /* transtype */
    case 174: /* trans_opt */
{
delete (yypminor->yy24);
}
      break;
    case 175: /* nm */
    case 182: /* table_options */
    case 185: /* columnid */
    case 188: /* id */
    case 189: /* ids */
    case 191: /* typename */
    case 239: /* dbnm */
    case 257: /* collate */
    case 271: /* vtabarg */
    case 272: /* vtabargtoken */
    case 273: /* anylist */
{
delete (yypminor->yy479);
}
      break;
    case 176: /* savepoint_opt */
    case 178: /* ifnotexists */
    case 200: /* autoinc */
    case 208: /* tconscomma */
    case 215: /* ifexists */
    case 250: /* not_opt */
    case 255: /* uniqueflag */
    case 266: /* database_kw_opt */
    case 268: /* kwcolumn_opt */
{
delete (yypminor->yy401);
}
      break;
    case 177: /* temp */
    case 222: /* distinct */
{
delete (yypminor->yy16);
}
      break;
    case 179: /* fullname */
{
delete (yypminor->yy500);
}
      break;
    case 180: /* columnlist */
{
delete (yypminor->yy152);
}
      break;
    case 181: /* conslist_opt */
    case 207: /* conslist */
{
delete (yypminor->yy43);
}
      break;
    case 183: /* select */
    case 218: /* selectnowith */
{
delete (yypminor->yy13);
}
      break;
    case 184: /* column */
{
delete (yypminor->yy237);
}
      break;
    case 186: /* type */
    case 190: /* typetoken */
{
delete (yypminor->yy37);
}
      break;
    case 187: /* carglist */
{
delete (yypminor->yy241);
}
      break;
    case 192: /* signed */
    case 193: /* plus_num */
    case 194: /* minus_num */
    case 196: /* term */
    case 258: /* nmnum */
    case 259: /* number */
{
delete (yypminor->yy469);
}
      break;
    case 195: /* ccons */
{
delete (yypminor->yy494);
}
      break;
    case 197: /* expr */
    case 225: /* where_opt */
    case 227: /* having_opt */
    case 249: /* exprx */
    case 252: /* case_operand */
    case 254: /* case_else */
{
delete (yypminor->yy252);
}
      break;
    case 198: /* onconf */
    case 212: /* resolvetype */
    case 213: /* orconf */
{
delete (yypminor->yy38);
}
      break;
    case 199: /* sortorder */
{
delete (yypminor->yy389);
}
      break;
    case 201: /* idxlist_opt */
    case 210: /* idxlist */
{
delete (yypminor->yy123);
}
      break;
    case 202: /* refargs */
{
delete (yypminor->yy214);
}
      break;
    case 203: /* defer_subclause */
    case 211: /* defer_subclause_opt */
{
delete (yypminor->yy229);
}
      break;
    case 204: /* refarg */
{
delete (yypminor->yy497);
}
      break;
    case 205: /* refact */
{
delete (yypminor->yy344);
}
      break;
    case 206: /* init_deferred_pred_opt */
{
delete (yypminor->yy192);
}
      break;
    case 209: /* tcons */
{
delete (yypminor->yy326);
}
      break;
    case 217: /* with */
    case 274: /* wqlist */
{
delete (yypminor->yy311);
}
      break;
    case 219: /* oneselect */
{
delete (yypminor->yy230);
}
      break;
    case 220: /* multiselect_op */
{
delete (yypminor->yy382);
}
      break;
    case 221: /* values */
{
delete (yypminor->yy546);
}
      break;
    case 223: /* selcollist */
    case 232: /* sclp */
{
delete (yypminor->yy303);
}
      break;
    case 224: /* from */
    case 234: /* joinsrc */
{
delete (yypminor->yy531);
}
      break;
    case 226: /* groupby_opt */
    case 230: /* nexprlist */
    case 231: /* exprlist */
    case 253: /* case_exprlist */
{
delete (yypminor->yy461);
}
      break;
    case 228: /* orderby_opt */
    case 242: /* sortlist */
{
delete (yypminor->yy213);
}
      break;
    case 229: /* limit_opt */
{
delete (yypminor->yy444);
}
      break;
    case 233: /* as */
{
delete (yypminor->yy130);
}
      break;
    case 235: /* singlesrc */
{
delete (yypminor->yy361);
}
      break;
    case 236: /* seltablist */
{
delete (yypminor->yy11);
}
      break;
    case 237: /* joinop */
{
delete (yypminor->yy301);
}
      break;
    case 238: /* joinconstr_opt */
{
delete (yypminor->yy445);
}
      break;
    case 240: /* indexed_opt */
{
delete (yypminor->yy532);
}
      break;
    case 241: /* inscollist */
    case 248: /* inscollist_opt */
    case 270: /* vtabarglist */
{
delete (yypminor->yy387);
}
      break;
    case 245: /* setlist */
{
delete (yypminor->yy101);
}
      break;
    case 247: /* insert_cmd */
{
delete (yypminor->yy254);
}
      break;
    case 251: /* likeop */
{
delete (yypminor->yy430);
}
      break;
    case 256: /* idxlist_single */
{
delete (yypminor->yy58);
}
      break;
    case 260: /* trigger_time */
{
delete (yypminor->yy153);
}
      break;
    case 261: /* trigger_event */
{
delete (yypminor->yy441);
}
      break;
    case 262: /* foreach_clause */
{
delete (yypminor->yy103);
}
      break;
    case 263: /* when_clause */
    case 267: /* key_opt */
{
if ((yypminor->yy252)) delete (yypminor->yy252);
}
      break;
    case 264: /* trigger_cmd_list */
{
delete (yypminor->yy220);
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    UNUSED_PARAMETER(yypMinor);
    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 168, 1 },
  { 169, 2 },
  { 169, 1 },
  { 170, 1 },
  { 170, 3 },
  { 171, 0 },
  { 171, 1 },
  { 171, 3 },
  { 172, 1 },
  { 167, 3 },
  { 174, 0 },
  { 174, 1 },
  { 174, 2 },
  { 174, 2 },
  { 173, 0 },
  { 173, 1 },
  { 173, 1 },
  { 173, 1 },
  { 167, 2 },
  { 167, 2 },
  { 167, 2 },
  { 176, 1 },
  { 176, 0 },
  { 167, 2 },
  { 167, 3 },
  { 167, 5 },
  { 167, 2 },
  { 167, 3 },
  { 167, 5 },
  { 167, 10 },
  { 167, 7 },
  { 167, 7 },
  { 167, 5 },
  { 182, 0 },
  { 182, 2 },
  { 182, 2 },
  { 178, 0 },
  { 178, 3 },
  { 177, 1 },
  { 177, 0 },
  { 180, 3 },
  { 180, 1 },
  { 184, 3 },
  { 185, 1 },
  { 185, 1 },
  { 188, 1 },
  { 189, 1 },
  { 175, 1 },
  { 175, 1 },
  { 175, 1 },
  { 186, 0 },
  { 186, 1 },
  { 190, 1 },
  { 190, 4 },
  { 190, 6 },
  { 191, 1 },
  { 191, 2 },
  { 191, 1 },
  { 192, 1 },
  { 192, 1 },
  { 187, 2 },
  { 187, 0 },
  { 195, 2 },
  { 195, 2 },
  { 195, 4 },
  { 195, 3 },
  { 195, 3 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 2 },
  { 195, 4 },
  { 195, 4 },
  { 195, 1 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 195, 3 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 200, 0 },
  { 200, 1 },
  { 202, 0 },
  { 202, 2 },
  { 204, 2 },
  { 204, 3 },
  { 204, 3 },
  { 204, 3 },
  { 204, 2 },
  { 205, 2 },
  { 205, 2 },
  { 205, 1 },
  { 205, 1 },
  { 205, 2 },
  { 203, 3 },
  { 203, 2 },
  { 206, 0 },
  { 206, 2 },
  { 206, 2 },
  { 181, 0 },
  { 181, 2 },
  { 207, 3 },
  { 207, 1 },
  { 208, 1 },
  { 208, 0 },
  { 209, 2 },
  { 209, 7 },
  { 209, 5 },
  { 209, 5 },
  { 209, 10 },
  { 209, 2 },
  { 209, 7 },
  { 209, 4 },
  { 211, 0 },
  { 211, 1 },
  { 198, 0 },
  { 198, 3 },
  { 213, 0 },
  { 213, 2 },
  { 212, 1 },
  { 212, 1 },
  { 212, 1 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 215, 2 },
  { 215, 0 },
  { 167, 8 },
  { 167, 7 },
  { 167, 5 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 167, 1 },
  { 216, 1 },
  { 183, 2 },
  { 218, 1 },
  { 218, 3 },
  { 218, 1 },
  { 218, 3 },
  { 220, 1 },
  { 220, 2 },
  { 220, 1 },
  { 220, 1 },
  { 219, 9 },
  { 221, 4 },
  { 221, 5 },
  { 222, 1 },
  { 222, 1 },
  { 222, 0 },
  { 232, 2 },
  { 232, 0 },
  { 223, 3 },
  { 223, 2 },
  { 223, 4 },
  { 223, 1 },
  { 223, 4 },
  { 233, 2 },
  { 233, 1 },
  { 233, 2 },
  { 233, 1 },
  { 233, 0 },
  { 224, 0 },
  { 224, 2 },
  { 234, 2 },
  { 234, 0 },
  { 236, 4 },
  { 236, 0 },
  { 235, 4 },
  { 235, 4 },
  { 235, 4 },
  { 235, 0 },
  { 235, 2 },
  { 235, 3 },
  { 235, 1 },
  { 235, 3 },
  { 235, 1 },
  { 238, 2 },
  { 238, 4 },
  { 238, 0 },
  { 239, 0 },
  { 239, 2 },
  { 179, 2 },
  { 237, 1 },
  { 237, 1 },
  { 237, 2 },
  { 237, 3 },
  { 237, 4 },
  { 237, 1 },
  { 240, 0 },
  { 240, 3 },
  { 240, 2 },
  { 240, 3 },
  { 228, 0 },
  { 228, 3 },
  { 242, 4 },
  { 242, 2 },
  { 199, 1 },
  { 199, 1 },
  { 199, 0 },
  { 226, 0 },
  { 226, 3 },
  { 226, 2 },
  { 227, 0 },
  { 227, 2 },
  { 229, 0 },
  { 229, 2 },
  { 229, 4 },
  { 229, 4 },
  { 167, 1 },
  { 243, 6 },
  { 243, 3 },
  { 243, 5 },
  { 243, 6 },
  { 243, 4 },
  { 225, 0 },
  { 225, 2 },
  { 225, 1 },
  { 167, 1 },
  { 244, 8 },
  { 244, 3 },
  { 244, 5 },
  { 244, 6 },
  { 244, 4 },
  { 245, 5 },
  { 245, 3 },
  { 245, 0 },
  { 245, 2 },
  { 245, 3 },
  { 245, 1 },
  { 167, 1 },
  { 246, 6 },
  { 246, 7 },
  { 246, 3 },
  { 246, 5 },
  { 246, 4 },
  { 246, 6 },
  { 247, 2 },
  { 247, 1 },
  { 248, 0 },
  { 248, 3 },
  { 241, 3 },
  { 241, 1 },
  { 241, 0 },
  { 241, 3 },
  { 241, 1 },
  { 249, 1 },
  { 249, 1 },
  { 249, 3 },
  { 249, 1 },
  { 249, 1 },
  { 249, 3 },
  { 249, 5 },
  { 249, 1 },
  { 249, 3 },
  { 249, 6 },
  { 249, 5 },
  { 249, 4 },
  { 249, 5 },
  { 249, 3 },
  { 249, 3 },
  { 249, 3 },
  { 249, 3 },
  { 249, 3 },
  { 249, 3 },
  { 249, 3 },
  { 249, 3 },
  { 249, 4 },
  { 249, 6 },
  { 249, 2 },
  { 249, 3 },
  { 249, 4 },
  { 249, 2 },
  { 249, 2 },
  { 249, 2 },
  { 249, 2 },
  { 249, 6 },
  { 249, 6 },
  { 249, 3 },
  { 249, 6 },
  { 249, 5 },
  { 249, 4 },
  { 249, 5 },
  { 249, 4 },
  { 249, 6 },
  { 197, 0 },
  { 197, 1 },
  { 250, 0 },
  { 250, 1 },
  { 251, 1 },
  { 253, 5 },
  { 253, 4 },
  { 254, 2 },
  { 254, 0 },
  { 252, 1 },
  { 252, 0 },
  { 231, 1 },
  { 231, 0 },
  { 230, 3 },
  { 230, 1 },
  { 167, 12 },
  { 167, 8 },
  { 167, 7 },
  { 167, 5 },
  { 255, 1 },
  { 255, 0 },
  { 201, 0 },
  { 201, 3 },
  { 210, 3 },
  { 210, 1 },
  { 256, 3 },
  { 256, 1 },
  { 257, 0 },
  { 257, 2 },
  { 257, 2 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 167, 1 },
  { 167, 2 },
  { 167, 3 },
  { 167, 5 },
  { 167, 6 },
  { 167, 5 },
  { 167, 6 },
  { 167, 4 },
  { 167, 2 },
  { 258, 1 },
  { 258, 1 },
  { 258, 1 },
  { 258, 1 },
  { 258, 1 },
  { 193, 2 },
  { 193, 1 },
  { 194, 2 },
  { 259, 1 },
  { 259, 1 },
  { 167, 15 },
  { 167, 12 },
  { 167, 14 },
  { 167, 10 },
  { 167, 7 },
  { 167, 5 },
  { 260, 1 },
  { 260, 1 },
  { 260, 2 },
  { 260, 0 },
  { 261, 1 },
  { 261, 1 },
  { 261, 1 },
  { 261, 3 },
  { 262, 0 },
  { 262, 3 },
  { 263, 0 },
  { 263, 2 },
  { 264, 3 },
  { 264, 2 },
  { 264, 1 },
  { 265, 1 },
  { 265, 1 },
  { 265, 1 },
  { 265, 1 },
  { 214, 1 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 167, 6 },
  { 167, 3 },
  { 267, 0 },
  { 267, 2 },
  { 266, 1 },
  { 266, 0 },
  { 167, 1 },
  { 167, 3 },
  { 167, 2 },
  { 167, 4 },
  { 167, 2 },
  { 167, 1 },
  { 167, 3 },
  { 167, 4 },
  { 167, 2 },
  { 167, 6 },
  { 167, 6 },
  { 167, 6 },
  { 167, 5 },
  { 167, 3 },
  { 268, 0 },
  { 268, 1 },
  { 167, 1 },
  { 269, 8 },
  { 269, 11 },
  { 269, 7 },
  { 269, 5 },
  { 270, 1 },
  { 270, 3 },
  { 271, 0 },
  { 271, 2 },
  { 272, 1 },
  { 272, 3 },
  { 273, 0 },
  { 273, 4 },
  { 273, 2 },
  { 217, 0 },
  { 217, 2 },
  { 217, 3 },
  { 274, 6 },
  { 274, 8 },
  { 274, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy113); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy113);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy113 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy113 = yymsp[-1].minor.yy113;
                                                yygotominor.yy113->explain = yymsp[-2].minor.yy511->explain;
                                                yygotominor.yy113->queryPlan = yymsp[-2].minor.yy511->queryPlan;
                                                delete yymsp[-2].minor.yy511;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy511 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy511 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy511 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 363: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==363);
      case 364: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==364);
      case 365: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==365);
      case 366: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==366);
      case 393: /* cmd ::= create_vtab */ yytestcase(yyruleno==393);
{yygotominor.yy113 = yymsp[0].minor.yy113;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy113 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy24->type,
                                                        yymsp[0].minor.yy24->transactionKw,
                                                        yymsp[0].minor.yy24->name
                                                    );
                                                delete yymsp[0].minor.yy24;
                                                delete yymsp[-1].minor.yy24;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy24 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy24 = new ParserStubTransDetails();
                                                yygotominor.yy24->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy24 = new ParserStubTransDetails();
                                                yygotominor.yy24->transactionKw = true;
                                                yygotominor.yy24->name = *(yymsp[0].minor.yy479);
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy24 = new ParserStubTransDetails();
                                                yygotominor.yy24->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy24 = new ParserStubTransDetails();
                                                yygotominor.yy24->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy24 = new ParserStubTransDetails();
                                                yygotominor.yy24->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy113 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy24->transactionKw,
                                                        yymsp[0].minor.yy24->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy24;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy113 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy24->transactionKw,
                                                        yymsp[0].minor.yy24->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy24;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy113 = new SqliteRollback(
                                                        yymsp[0].minor.yy24->transactionKw,
                                                        yymsp[0].minor.yy24->name
                                                    );
                                                delete yymsp[0].minor.yy24;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 37: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==37);
      case 86: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==86);
      case 108: /* tconscomma ::= COMMA */ yytestcase(yyruleno==108);
      case 130: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==130);
      case 293: /* not_opt ::= NOT */ yytestcase(yyruleno==293);
      case 309: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==309);
      case 375: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==375);
      case 391: /* kwcolumn_opt ::= */ yytestcase(yyruleno==391);
{yygotominor.yy401 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 36: /* ifnotexists ::= */ yytestcase(yyruleno==36);
      case 85: /* autoinc ::= */ yytestcase(yyruleno==85);
      case 109: /* tconscomma ::= */ yytestcase(yyruleno==109);
      case 131: /* ifexists ::= */ yytestcase(yyruleno==131);
      case 292: /* not_opt ::= */ yytestcase(yyruleno==292);
      case 310: /* uniqueflag ::= */ yytestcase(yyruleno==310);
      case 376: /* database_kw_opt ::= */ yytestcase(yyruleno==376);
      case 392: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==392);
{yygotominor.yy401 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy113 = new SqliteSavepoint(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy113 = new SqliteRelease(*(yymsp[-1].minor.yy401), *(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy113 = new SqliteRollback(
                                                        yymsp[-3].minor.yy24->transactionKw,
                                                        *(yymsp[-1].minor.yy401),
                                                        *(yymsp[0].minor.yy479)
                                                    );
                                                delete yymsp[-1].minor.yy401;
                                                delete yymsp[-3].minor.yy24;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,176,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy113 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy401),
                                                        *(yymsp[-8].minor.yy16),
                                                        yymsp[-5].minor.yy500->name1,
                                                        yymsp[-5].minor.yy500->name2,
                                                        *(yymsp[-3].minor.yy152),
                                                        *(yymsp[-2].minor.yy43),
                                                        *(yymsp[0].minor.yy479)
                                                    );
                                                delete yymsp[-6].minor.yy401;
                                                delete yymsp[-8].minor.yy16;
                                                delete yymsp[-3].minor.yy152;
                                                delete yymsp[-2].minor.yy43;
                                                delete yymsp[-5].minor.yy500;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy113 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy401),
                                                        *(yymsp[-5].minor.yy16),
                                                        yymsp[-2].minor.yy500->name1,
                                                        yymsp[-2].minor.yy500->name2,
                                                        yymsp[0].minor.yy13
                                                    );
                                                delete yymsp[-3].minor.yy401;
                                                delete yymsp[-5].minor.yy16;
                                                delete yymsp[-2].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 133: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==133);
      case 346: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==346);
{  yy_destructor(yypParser,177,&yymsp[-5].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 134: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==134);
      case 347: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==347);
{  yy_destructor(yypParser,177,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
      case 185: /* dbnm ::= */ yytestcase(yyruleno==185);
      case 317: /* collate ::= */ yytestcase(yyruleno==317);
      case 400: /* vtabarg ::= */ yytestcase(yyruleno==400);
      case 404: /* anylist ::= */ yytestcase(yyruleno==404);
{yygotominor.yy479 = new QString();}
        break;
      case 34: /* table_options ::= WITHOUT nm */
      case 35: /* table_options ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==35);
{
                                                if (yymsp[0].minor.yy479->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy479)));

                                                yygotominor.yy479 = yymsp[0].minor.yy479;
                                            }
        break;
      case 38: /* temp ::= TEMP */
{yygotominor.yy16 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 39: /* temp ::= */
      case 154: /* distinct ::= */ yytestcase(yyruleno==154);
{yygotominor.yy16 = new int(0);}
        break;
      case 40: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy152->append(yymsp[0].minor.yy237);
                                                yygotominor.yy152 = yymsp[-2].minor.yy152;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 41: /* columnlist ::= column */
{
                                                yygotominor.yy152 = new ParserCreateTableColumnList();
                                                yygotominor.yy152->append(yymsp[0].minor.yy237);
                                            }
        break;
      case 42: /* column ::= columnid type carglist */
{
                                                yygotominor.yy237 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy479), yymsp[-1].minor.yy37, *(yymsp[0].minor.yy241));
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[0].minor.yy241;
                                                objectForTokens = yygotominor.yy237;
                                            }
        break;
      case 43: /* columnid ::= nm */
      case 44: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==44);
      case 47: /* nm ::= id */ yytestcase(yyruleno==47);
      case 55: /* typename ::= ids */ yytestcase(yyruleno==55);
      case 186: /* dbnm ::= DOT nm */ yytestcase(yyruleno==186);
      case 318: /* collate ::= COLLATE ids */ yytestcase(yyruleno==318);
      case 319: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==319);
{yygotominor.yy479 = yymsp[0].minor.yy479;}
        break;
      case 45: /* id ::= ID */
{
                                                yygotominor.yy479 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value,
                                                        parserContext->dialect
                                                    )
                                                );
                                            }
        break;
      case 46: /* ids ::= ID|STRING */
      case 49: /* nm ::= JOIN_KW */ yytestcase(yyruleno==49);
{yygotominor.yy479 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 48: /* nm ::= STRING */
{yygotominor.yy479 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 50: /* type ::= */
{yygotominor.yy37 = nullptr;}
        break;
      case 51: /* type ::= typetoken */
{yygotominor.yy37 = yymsp[0].minor.yy37;}
        break;
      case 52: /* typetoken ::= typename */
{
                                                yygotominor.yy37 = new SqliteColumnType(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy37;
                                            }
        break;
      case 53: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy37 = new SqliteColumnType(*(yymsp[-3].minor.yy479), *(yymsp[-1].minor.yy469));
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-1].minor.yy469;
                                                objectForTokens = yygotominor.yy37;
                                            }
        break;
      case 54: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy37 = new SqliteColumnType(*(yymsp[-5].minor.yy479), *(yymsp[-3].minor.yy469), *(yymsp[-1].minor.yy469));
                                                delete yymsp[-5].minor.yy479;
                                                delete yymsp[-3].minor.yy469;
                                                delete yymsp[-1].minor.yy469;
                                                objectForTokens = yygotominor.yy37;
                                            }
        break;
      case 56: /* typename ::= typename ids */
      case 57: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==57);
{
                                                yymsp[-1].minor.yy479->append(" " + *(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                yygotominor.yy479 = yymsp[-1].minor.yy479;
                                            }
        break;
      case 58: /* signed ::= plus_num */
      case 59: /* signed ::= minus_num */ yytestcase(yyruleno==59);
      case 332: /* nmnum ::= plus_num */ yytestcase(yyruleno==332);
      case 337: /* plus_num ::= PLUS number */ yytestcase(yyruleno==337);
      case 338: /* plus_num ::= number */ yytestcase(yyruleno==338);
{yygotominor.yy469 = yymsp[0].minor.yy469;}
        break;
      case 60: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy241->append(yymsp[0].minor.yy494);
                                                yygotominor.yy241 = yymsp[-1].minor.yy241;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 61: /* carglist ::= */
{yygotominor.yy241 = new ParserCreateTableColumnConstraintList();}
        break;
      case 62: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefNameOnly(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 63: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefTerm(*(yymsp[0].minor.yy469));
                                                delete yymsp[0].minor.yy469;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 64: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefExpr(yymsp[-1].minor.yy252);
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 65: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefTerm(*(yymsp[0].minor.yy469), false);
                                                delete yymsp[0].minor.yy469;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 66: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefTerm(*(yymsp[0].minor.yy469), true);
                                                delete yymsp[0].minor.yy469;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 67: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefId(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 69: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initNull(*(yymsp[0].minor.yy38));
                                                delete yymsp[0].minor.yy38;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 70: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initNotNull(*(yymsp[0].minor.yy38));
                                                delete yymsp[0].minor.yy38;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 71: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initPk(*(yymsp[-2].minor.yy389), *(yymsp[-1].minor.yy38), *(yymsp[0].minor.yy401));
                                                delete yymsp[-2].minor.yy389;
                                                delete yymsp[0].minor.yy401;
                                                delete yymsp[-1].minor.yy38;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 72: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initUnique(*(yymsp[0].minor.yy38));
                                                delete yymsp[0].minor.yy38;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 73: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initCheck(yymsp[-1].minor.yy252);
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 74: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initFk(*(yymsp[-2].minor.yy479), *(yymsp[-1].minor.yy123), *(yymsp[0].minor.yy214));
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[0].minor.yy214;
                                                delete yymsp[-1].minor.yy123;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 75: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initDefer(yymsp[0].minor.yy229->initially, yymsp[0].minor.yy229->deferrable);
                                                delete yymsp[0].minor.yy229;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 76: /* ccons ::= COLLATE ids */
      case 77: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==77);
      case 78: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==78);
      case 79: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==79);
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initColl(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy494;
                                            }
        break;
      case 80: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy494 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy494->initCheck();
                                                objectForTokens = yygotominor.yy494;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 81: /* term ::= NULL */
{yygotominor.yy469 = new QVariant();}
        break;
      case 82: /* term ::= INTEGER */
      case 340: /* number ::= INTEGER */ yytestcase(yyruleno==340);
{yygotominor.yy469 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 83: /* term ::= FLOAT */
      case 341: /* number ::= FLOAT */ yytestcase(yyruleno==341);
{yygotominor.yy469 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 84: /* term ::= STRING|BLOB */
      case 334: /* nmnum ::= ON */ yytestcase(yyruleno==334);
      case 335: /* nmnum ::= DELETE */ yytestcase(yyruleno==335);
      case 336: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==336);
{yygotominor.yy469 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 87: /* refargs ::= */
{yygotominor.yy214 = new ParserFkConditionList();}
        break;
      case 88: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy214->append(yymsp[0].minor.yy497);
                                                yygotominor.yy214 = yymsp[-1].minor.yy214;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 89: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy497 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 90: /* refarg ::= ON INSERT refact */
{yygotominor.yy497 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy344)); delete yymsp[0].minor.yy344;}
        break;
      case 91: /* refarg ::= ON DELETE refact */
{yygotominor.yy497 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy344)); delete yymsp[0].minor.yy344;}
        break;
      case 92: /* refarg ::= ON UPDATE refact */
      case 93: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==93);
{yygotominor.yy497 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy344)); delete yymsp[0].minor.yy344;}
        break;
      case 94: /* refact ::= SET NULL */
{yygotominor.yy344 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 95: /* refact ::= SET DEFAULT */
{yygotominor.yy344 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 96: /* refact ::= CASCADE */
{yygotominor.yy344 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 97: /* refact ::= RESTRICT */
{yygotominor.yy344 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 98: /* refact ::= NO ACTION */
{yygotominor.yy344 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 99: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy229 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 100: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy229 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 101: /* init_deferred_pred_opt ::= */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 102: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 103: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 104: /* conslist_opt ::= */
{yygotominor.yy43 = new ParserCreateTableConstraintList();}
        break;
      case 105: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy43 = yymsp[0].minor.yy43;}
        break;
      case 106: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy326->afterComma = *(yymsp[-1].minor.yy401);
                                                yymsp[-2].minor.yy43->append(yymsp[0].minor.yy326);
                                                yygotominor.yy43 = yymsp[-2].minor.yy43;
                                                delete yymsp[-1].minor.yy401;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 107: /* conslist ::= tcons */
{
                                                yygotominor.yy43 = new ParserCreateTableConstraintList();
                                                yygotominor.yy43->append(yymsp[0].minor.yy326);
                                            }
        break;
      case 110: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy326 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy326->initNameOnly(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy326;
                                            }
        break;
      case 111: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy326 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy326->initPk(*(yymsp[-3].minor.yy123), *(yymsp[-2].minor.yy401), *(yymsp[0].minor.yy38));
                                                delete yymsp[-2].minor.yy401;
                                                delete yymsp[0].minor.yy38;
                                                delete yymsp[-3].minor.yy123;
                                                objectForTokens = yygotominor.yy326;
                                            }
        break;
      case 112: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy326 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy326->initUnique(*(yymsp[-2].minor.yy123), *(yymsp[0].minor.yy38));
                                                delete yymsp[0].minor.yy38;
                                                delete yymsp[-2].minor.yy123;
                                                objectForTokens = yygotominor.yy326;
                                            }
        break;
      case 113: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy326 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy326->initCheck(yymsp[-2].minor.yy252, *(yymsp[0].minor.yy38));
                                                objectForTokens = yygotominor.yy326;
                                            }
        break;
      case 114: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 115: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==115);
      case 116: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==116);
{
                                                yygotominor.yy326 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy326->initFk(
                                                    *(yymsp[-6].minor.yy123),
                                                    *(yymsp[-3].minor.yy479),
                                                    *(yymsp[-2].minor.yy123),
                                                    *(yymsp[-1].minor.yy214),
                                                    yymsp[0].minor.yy229->initially,
                                                    yymsp[0].minor.yy229->deferrable
                                                );
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-1].minor.yy214;
                                                delete yymsp[0].minor.yy229;
                                                delete yymsp[-2].minor.yy123;
                                                delete yymsp[-6].minor.yy123;
                                                objectForTokens = yygotominor.yy326;
                                            }
        break;
      case 117: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy326 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy326->initCheck();
                                                objectForTokens = yygotominor.yy326;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,198,&yymsp[0].minor);
}
        break;
      case 118: /* defer_subclause_opt ::= */
{yygotominor.yy229 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 119: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy229 = yymsp[0].minor.yy229;}
        break;
      case 120: /* onconf ::= */
      case 122: /* orconf ::= */ yytestcase(yyruleno==122);
{yygotominor.yy38 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 121: /* onconf ::= ON CONFLICT resolvetype */
      case 123: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==123);
{yygotominor.yy38 = yymsp[0].minor.yy38;}
        break;
      case 124: /* resolvetype ::= raisetype */
      case 125: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==125);
      case 126: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==126);
{yygotominor.yy38 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 127: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropTable(*(yymsp[-1].minor.yy401), yymsp[0].minor.yy500->name1, yymsp[0].minor.yy500->name2);
                                                delete yymsp[-1].minor.yy401;
                                                delete yymsp[0].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 128: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 129: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==129);
      case 136: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==136);
      case 137: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==137);
      case 178: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==178);
      case 179: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==179);
      case 180: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==180);
      case 181: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==181);
      case 307: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==307);
      case 308: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==308);
      case 321: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==321);
      case 322: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==322);
      case 330: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==330);
      case 331: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==331);
      case 369: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==369);
      case 370: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==370);
      case 380: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==380);
      case 381: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==381);
      case 384: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==384);
      case 385: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==385);
      case 389: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==389);
      case 390: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==390);
      case 396: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==396);
      case 397: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==397);
{  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 132: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy113 = new SqliteCreateView(*(yymsp[-6].minor.yy16), *(yymsp[-4].minor.yy401), yymsp[-3].minor.yy500->name1, yymsp[-3].minor.yy500->name2, yymsp[0].minor.yy13, *(yymsp[-2].minor.yy123));
                                                delete yymsp[-6].minor.yy16;
                                                delete yymsp[-4].minor.yy401;
                                                delete yymsp[-3].minor.yy500;
                                                delete yymsp[-2].minor.yy123;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 135: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropView(*(yymsp[-1].minor.yy401), yymsp[0].minor.yy500->name1, yymsp[0].minor.yy500->name2);
                                                delete yymsp[-1].minor.yy401;
                                                delete yymsp[0].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 138: /* cmd ::= select_stmt */
      case 214: /* cmd ::= delete_stmt */ yytestcase(yyruleno==214);
      case 223: /* cmd ::= update_stmt */ yytestcase(yyruleno==223);
      case 235: /* cmd ::= insert_stmt */ yytestcase(yyruleno==235);
{
                                                yygotominor.yy113 = yymsp[0].minor.yy113;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 139: /* select_stmt ::= select */
{
                                                yygotominor.yy113 = yymsp[0].minor.yy13;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 140: /* select ::= with selectnowith */
{
                                                yygotominor.yy13 = yymsp[0].minor.yy13;
                                                yymsp[0].minor.yy13->setWith(yymsp[-1].minor.yy311);
                                                objectForTokens = yygotominor.yy13;
                                            }
        break;
      case 141: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy13 = SqliteSelect::append(yymsp[0].minor.yy230);
                                                objectForTokens = yygotominor.yy13;
                                            }
        break;
      case 142: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy13 = SqliteSelect::append(yymsp[-2].minor.yy13, *(yymsp[-1].minor.yy382), yymsp[0].minor.yy230);
                                                delete yymsp[-1].minor.yy382;
                                                objectForTokens = yygotominor.yy13;
                                            }
        break;
      case 143: /* selectnowith ::= values */
{
                                                yygotominor.yy13 = SqliteSelect::append(*(yymsp[0].minor.yy546));
                                                delete yymsp[0].minor.yy546;
                                                objectForTokens = yygotominor.yy13;
                                            }
        break;
      case 144: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy13 = SqliteSelect::append(yymsp[-2].minor.yy13, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy546));
                                                delete yymsp[0].minor.yy546;
                                                objectForTokens = yygotominor.yy13;
                                            }
        break;
      case 145: /* multiselect_op ::= UNION */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 146: /* multiselect_op ::= UNION ALL */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 147: /* multiselect_op ::= EXCEPT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 148: /* multiselect_op ::= INTERSECT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 149: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy230 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy16),
                                                        *(yymsp[-6].minor.yy303),
                                                        yymsp[-5].minor.yy531,
                                                        yymsp[-4].minor.yy252,
                                                        *(yymsp[-3].minor.yy461),
                                                        yymsp[-2].minor.yy252,
                                                        *(yymsp[-1].minor.yy213),
                                                        yymsp[0].minor.yy444
                                                    );
                                                delete yymsp[-6].minor.yy303;
                                                delete yymsp[-7].minor.yy16;
                                                delete yymsp[-3].minor.yy461;
                                                delete yymsp[-1].minor.yy213;
                                                objectForTokens = yygotominor.yy230;
                                            }
        break;
      case 150: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy546 = new ParserExprNestedList();
                                                yygotominor.yy546->append(*(yymsp[-1].minor.yy461));
                                                delete yymsp[-1].minor.yy461;
                                            }
        break;
      case 151: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy546->append(*(yymsp[-1].minor.yy461));
                                                yygotominor.yy546 = yymsp[-4].minor.yy546;
                                                delete yymsp[-1].minor.yy461;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 152: /* distinct ::= DISTINCT */
{yygotominor.yy16 = new int(1);}
        break;
      case 153: /* distinct ::= ALL */
{yygotominor.yy16 = new int(2);}
        break;
      case 155: /* sclp ::= selcollist COMMA */
{yygotominor.yy303 = yymsp[-1].minor.yy303;}
        break;
      case 156: /* sclp ::= */
{yygotominor.yy303 = new ParserResultColumnList();}
        break;
      case 157: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy252,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString::null
                                                    );

                                                yymsp[-2].minor.yy303->append(obj);
                                                yygotominor.yy303 = yymsp[-2].minor.yy303;
                                                delete yymsp[0].minor.yy130;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 158: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy303->append(obj);
                                                yygotominor.yy303 = yymsp[-1].minor.yy303;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 159: /* selcollist ::= sclp nm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        *(yymsp[-2].minor.yy479)
                                                    );
                                                yymsp[-3].minor.yy303->append(obj);
                                                yygotominor.yy303 = yymsp[-3].minor.yy303;
                                                delete yymsp[-2].minor.yy479;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 160: /* selcollist ::= sclp */
      case 161: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==161);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy303 = yymsp[0].minor.yy303;
                                            }
        break;
      case 162: /* as ::= AS nm */
{
                                                yygotominor.yy130 = new ParserStubAlias(*(yymsp[0].minor.yy479), true);
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 163: /* as ::= ids */
      case 164: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==164);
      case 165: /* as ::= ID_ALIAS */ yytestcase(yyruleno==165);
{
                                                yygotominor.yy130 = new ParserStubAlias(*(yymsp[0].minor.yy479), false);
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 166: /* as ::= */
{yygotominor.yy130 = nullptr;}
        break;
      case 167: /* from ::= */
{yygotominor.yy531 = nullptr;}
        break;
      case 168: /* from ::= FROM joinsrc */
{yygotominor.yy531 = yymsp[0].minor.yy531;}
        break;
      case 169: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy531 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy361,
                                                        *(yymsp[0].minor.yy11)
                                                    );
                                                delete yymsp[0].minor.yy11;
                                                objectForTokens = yygotominor.yy531;
                                            }
        break;
      case 170: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy531 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy531;
                                            }
        break;
      case 171: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy301, yymsp[-1].minor.yy361, yymsp[0].minor.yy445);

                                                yymsp[-3].minor.yy11->append(src);
                                                yygotominor.yy11 = yymsp[-3].minor.yy11;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 172: /* seltablist ::= */
{
                                                yygotominor.yy11 = new ParserOtherSourceList();
                                            }
        break;
      case 173: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy479),
                                                        *(yymsp[-2].minor.yy479),
                                                        yymsp[-1].minor.yy130 ? yymsp[-1].minor.yy130->asKw : false,
                                                        yymsp[-1].minor.yy130 ? yymsp[-1].minor.yy130->name : QString::null,
                                                        yymsp[0].minor.yy532 ? yymsp[0].minor.yy532->notIndexedKw : false,
                                                        yymsp[0].minor.yy532 ? yymsp[0].minor.yy532->indexedBy : QString::null
                                                    );
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[-1].minor.yy130;
                                                if (yymsp[0].minor.yy532)
                                                    delete yymsp[0].minor.yy532;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 174: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy13,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString::null
                                                    );
                                                delete yymsp[0].minor.yy130;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 175: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy531,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString::null
                                                    );
                                                delete yymsp[0].minor.yy130;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 176: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 177: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy361->database = *(yymsp[-1].minor.yy479);
                                                delete yymsp[-1].minor.yy479;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 182: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy445 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy445;
                                            }
        break;
      case 183: /* joinconstr_opt ::= USING LP inscollist RP */
{
                                                yygotominor.yy445 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy387));
                                                delete yymsp[-1].minor.yy387;
                                                objectForTokens = yygotominor.yy445;
                                            }
        break;
      case 184: /* joinconstr_opt ::= */
{yygotominor.yy445 = nullptr;}
        break;
      case 187: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy500 = new ParserFullName();
                                                yygotominor.yy500->name1 = *(yymsp[-1].minor.yy479);
                                                yygotominor.yy500->name2 = *(yymsp[0].minor.yy479);
                                                delete yymsp[-1].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 188: /* joinop ::= COMMA */
{
                                                yygotominor.yy301 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy301;
                                            }
        break;
      case 189: /* joinop ::= JOIN */
{
                                                yygotominor.yy301 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy301;
                                            }
        break;
      case 190: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy301 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy301;
                                            }
        break;
      case 191: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy301 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy479));
                                                delete yymsp[-1].minor.yy479;
                                                objectForTokens = yygotominor.yy301;
                                            }
        break;
      case 192: /* joinop ::= JOIN_KW nm nm JOIN */
      case 193: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==193);
{
                                                yygotominor.yy301 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy479), *(yymsp[-1].minor.yy479));
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[-2].minor.yy479;
                                                objectForTokens = yygotominor.yy301;
                                            }
        break;
      case 194: /* indexed_opt ::= */
{yygotominor.yy532 = nullptr;}
        break;
      case 195: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy532 = new ParserIndexedBy(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 196: /* indexed_opt ::= NOT INDEXED */
      case 197: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==197);
{yygotominor.yy532 = new ParserIndexedBy(true);}
        break;
      case 198: /* orderby_opt ::= */
{yygotominor.yy213 = new ParserOrderByList();}
        break;
      case 199: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy213 = yymsp[0].minor.yy213;}
        break;
      case 200: /* sortlist ::= sortlist COMMA expr sortorder */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-1].minor.yy252, *(yymsp[0].minor.yy389));
                                                yymsp[-3].minor.yy213->append(obj);
                                                yygotominor.yy213 = yymsp[-3].minor.yy213;
                                                delete yymsp[0].minor.yy389;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 201: /* sortlist ::= expr sortorder */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-1].minor.yy252, *(yymsp[0].minor.yy389));
                                                yygotominor.yy213 = new ParserOrderByList();
                                                yygotominor.yy213->append(obj);
                                                delete yymsp[0].minor.yy389;
                                                objectForTokens = obj;
                                            }
        break;
      case 202: /* sortorder ::= ASC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 203: /* sortorder ::= DESC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 204: /* sortorder ::= */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 205: /* groupby_opt ::= */
      case 302: /* exprlist ::= */ yytestcase(yyruleno==302);
{yygotominor.yy461 = new ParserExprList();}
        break;
      case 206: /* groupby_opt ::= GROUP BY nexprlist */
      case 301: /* exprlist ::= nexprlist */ yytestcase(yyruleno==301);
{yygotominor.yy461 = yymsp[0].minor.yy461;}
        break;
      case 207: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy461 = new ParserExprList();
                                            }
        break;
      case 208: /* having_opt ::= */
      case 220: /* where_opt ::= */ yytestcase(yyruleno==220);
      case 298: /* case_else ::= */ yytestcase(yyruleno==298);
      case 300: /* case_operand ::= */ yytestcase(yyruleno==300);
      case 358: /* when_clause ::= */ yytestcase(yyruleno==358);
      case 373: /* key_opt ::= */ yytestcase(yyruleno==373);
{yygotominor.yy252 = nullptr;}
        break;
      case 209: /* having_opt ::= HAVING expr */
      case 221: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==221);
      case 291: /* expr ::= exprx */ yytestcase(yyruleno==291);
      case 297: /* case_else ::= ELSE expr */ yytestcase(yyruleno==297);
      case 299: /* case_operand ::= exprx */ yytestcase(yyruleno==299);
      case 359: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==359);
      case 374: /* key_opt ::= KEY expr */ yytestcase(yyruleno==374);
{yygotominor.yy252 = yymsp[0].minor.yy252;}
        break;
      case 210: /* limit_opt ::= */
{yygotominor.yy444 = nullptr;}
        break;
      case 211: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 212: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[-2].minor.yy252, yymsp[0].minor.yy252, true);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 213: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[-2].minor.yy252, yymsp[0].minor.yy252, false);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 215: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt */
{
                                                if (yymsp[-1].minor.yy532)
                                                {
                                                    if (!yymsp[-1].minor.yy532->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy113 = new SqliteDelete(
                                                                yymsp[-2].minor.yy500->name1,
                                                                yymsp[-2].minor.yy500->name2,
                                                                yymsp[-1].minor.yy532->indexedBy,
                                                                yymsp[0].minor.yy252,
                                                                yymsp[-5].minor.yy311
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy113 = new SqliteDelete(
                                                                yymsp[-2].minor.yy500->name1,
                                                                yymsp[-2].minor.yy500->name2,
                                                                yymsp[-1].minor.yy532->notIndexedKw,
                                                                yymsp[0].minor.yy252,
                                                                yymsp[-5].minor.yy311
                                                            );
                                                    }
                                                    delete yymsp[-1].minor.yy532;
                                                }
                                                else
                                                {
                                                    yygotominor.yy113 = new SqliteDelete(
                                                            yymsp[-2].minor.yy500->name1,
                                                            yymsp[-2].minor.yy500->name2,
                                                            false,
                                                            yymsp[0].minor.yy252,
                                                            yymsp[-5].minor.yy311
                                                        );
                                                }
                                                delete yymsp[-2].minor.yy500;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 216: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy311;
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 217: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy311;
                                                q->database = *(yymsp[-1].minor.yy479);
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-1].minor.yy479;
                                            }
        break;
      case 218: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 227: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==227);
{  yy_destructor(yypParser,217,&yymsp[-5].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 219: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 228: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==228);
{  yy_destructor(yypParser,217,&yymsp[-3].minor);
}
        break;
      case 222: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy252 = new SqliteExpr();
                                            }
        break;
      case 224: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist where_opt */
{
                                                yygotominor.yy113 = new SqliteUpdate(
                                                        *(yymsp[-5].minor.yy38),
                                                        yymsp[-4].minor.yy500->name1,
                                                        yymsp[-4].minor.yy500->name2,
                                                        yymsp[-3].minor.yy532 ? yymsp[-3].minor.yy532->notIndexedKw : false,
                                                        yymsp[-3].minor.yy532 ? yymsp[-3].minor.yy532->indexedBy : QString::null,
                                                        *(yymsp[-1].minor.yy101),
                                                        yymsp[0].minor.yy252,
                                                        yymsp[-7].minor.yy311
                                                    );
                                                delete yymsp[-5].minor.yy38;
                                                delete yymsp[-4].minor.yy500;
                                                delete yymsp[-1].minor.yy101;
                                                if (yymsp[-3].minor.yy532)
                                                    delete yymsp[-3].minor.yy532;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 225: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy311;
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[0].minor.yy38;
                                            }
        break;
      case 226: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy311;
                                                q->database = *(yymsp[-1].minor.yy479);
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-2].minor.yy38;
                                                delete yymsp[-1].minor.yy479;
                                            }
        break;
      case 229: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy101->append(ParserSetValue(*(yymsp[-2].minor.yy479), yymsp[0].minor.yy252));
                                                yygotominor.yy101 = yymsp[-4].minor.yy101;
                                                delete yymsp[-2].minor.yy479;
                                                DONT_INHERIT_TOKENS("setlist");
                                            }
        break;
      case 230: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy101 = new ParserSetValueList();
                                                yygotominor.yy101->append(ParserSetValue(*(yymsp[-2].minor.yy479), yymsp[0].minor.yy252));
                                                delete yymsp[-2].minor.yy479;
                                            }
        break;
      case 231: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy101 = new ParserSetValueList();
                                            }
        break;
      case 232: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy101 = yymsp[-1].minor.yy101;
                                            }
        break;
      case 233: /* setlist ::= setlist COMMA ID_COL */
      case 234: /* setlist ::= ID_COL */ yytestcase(yyruleno==234);
{  yy_destructor(yypParser,245,&yymsp[-2].minor);
}
        break;
      case 236: /* insert_stmt ::= with insert_cmd INTO fullname inscollist_opt select */
{
                                                yygotominor.yy113 = new SqliteInsert(
                                                        yymsp[-4].minor.yy254->replace,
                                                        yymsp[-4].minor.yy254->orConflict,
                                                        yymsp[-2].minor.yy500->name1,
                                                        yymsp[-2].minor.yy500->name2,
                                                        *(yymsp[-1].minor.yy387),
                                                        yymsp[0].minor.yy13,
                                                        yymsp[-5].minor.yy311
                                                    );
                                                delete yymsp[-2].minor.yy500;
                                                delete yymsp[-4].minor.yy254;
                                                delete yymsp[-1].minor.yy387;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 237: /* insert_stmt ::= with insert_cmd INTO fullname inscollist_opt DEFAULT VALUES */
{
                                                yygotominor.yy113 = new SqliteInsert(
                                                        yymsp[-5].minor.yy254->replace,
                                                        yymsp[-5].minor.yy254->orConflict,
                                                        yymsp[-3].minor.yy500->name1,
                                                        yymsp[-3].minor.yy500->name2,
                                                        *(yymsp[-2].minor.yy387),
                                                        yymsp[-6].minor.yy311
                                                    );
                                                delete yymsp[-3].minor.yy500;
                                                delete yymsp[-5].minor.yy254;
                                                delete yymsp[-2].minor.yy387;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 238: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy254->replace;
                                                q->onConflict = yymsp[-1].minor.yy254->orConflict;
                                                q->with = yymsp[-2].minor.yy311;
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-1].minor.yy254;
                                            }
        break;
      case 239: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy254->replace;
                                                q->onConflict = yymsp[-3].minor.yy254->orConflict;
                                                q->with = yymsp[-4].minor.yy311;
                                                q->database = *(yymsp[-1].minor.yy479);
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-3].minor.yy254;
                                                delete yymsp[-1].minor.yy479;
                                            }
        break;
      case 240: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,217,&yymsp[-3].minor);
  yy_destructor(yypParser,247,&yymsp[-2].minor);
}
        break;
      case 241: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,217,&yymsp[-5].minor);
  yy_destructor(yypParser,247,&yymsp[-4].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 242: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy254 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy38));
                                                delete yymsp[0].minor.yy38;
                                            }
        break;
      case 243: /* insert_cmd ::= REPLACE */
{yygotominor.yy254 = new ParserStubInsertOrReplace(true);}
        break;
      case 244: /* inscollist_opt ::= */
{yygotominor.yy387 = new ParserStringList();}
        break;
      case 245: /* inscollist_opt ::= LP inscollist RP */
{yygotominor.yy387 = yymsp[-1].minor.yy387;}
        break;
      case 246: /* inscollist ::= inscollist COMMA nm */
{
                                                yymsp[-2].minor.yy387->append(*(yymsp[0].minor.yy479));
                                                yygotominor.yy387 = yymsp[-2].minor.yy387;
                                                delete yymsp[0].minor.yy479;
                                                DONT_INHERIT_TOKENS("inscollist");
                                            }
        break;
      case 247: /* inscollist ::= nm */
{
                                                yygotominor.yy387 = new ParserStringList();
                                                yygotominor.yy387->append(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 248: /* inscollist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy387 = new ParserStringList();
                                            }
        break;
      case 249: /* inscollist ::= inscollist COMMA ID_COL */
      case 250: /* inscollist ::= ID_COL */ yytestcase(yyruleno==250);
{  yy_destructor(yypParser,241,&yymsp[-2].minor);
}
        break;
      case 251: /* exprx ::= term */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initLiteral(*(yymsp[0].minor.yy469));
                                                delete yymsp[0].minor.yy469;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 252: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 253: /* exprx ::= LP expr RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initSubExpr(yymsp[-1].minor.yy252);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 254: /* exprx ::= id */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initId(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 255: /* exprx ::= JOIN_KW */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initId(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 256: /* exprx ::= nm DOT nm */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initId(*(yymsp[-2].minor.yy479), *(yymsp[0].minor.yy479));
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 257: /* exprx ::= nm DOT nm DOT nm */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initId(*(yymsp[-4].minor.yy479), *(yymsp[-2].minor.yy479), *(yymsp[0].minor.yy479));
                                                delete yymsp[-4].minor.yy479;
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 258: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 259: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCollate(yymsp[-2].minor.yy252, *(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 260: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCast(yymsp[-3].minor.yy252, yymsp[-1].minor.yy37);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 261: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy16), *(yymsp[-1].minor.yy461));
                                                delete yymsp[-2].minor.yy16;
                                                delete yymsp[-1].minor.yy461;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 262: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 263: /* exprx ::= LP nexprlist COMMA expr RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initRowValue(*(yymsp[-3].minor.yy461), yymsp[-1].minor.yy252);
                                                delete yymsp[-3].minor.yy461;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 264: /* exprx ::= expr AND expr */
      case 265: /* exprx ::= expr OR expr */ yytestcase(yyruleno==265);
      case 266: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==266);
      case 267: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==267);
      case 268: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==268);
      case 269: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==269);
      case 270: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==270);
      case 271: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==271);
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initBinOp(yymsp[-2].minor.yy252, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy252);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 272: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initLike(yymsp[-3].minor.yy252, *(yymsp[-2].minor.yy401), *(yymsp[-1].minor.yy430), yymsp[0].minor.yy252);
                                                delete yymsp[-2].minor.yy401;
                                                delete yymsp[-1].minor.yy430;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 273: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initLike(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy401), *(yymsp[-3].minor.yy430), yymsp[-2].minor.yy252, yymsp[0].minor.yy252);
                                                delete yymsp[-4].minor.yy401;
                                                delete yymsp[-3].minor.yy430;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 274: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initNull(yymsp[-1].minor.yy252, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 275: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initNull(yymsp[-2].minor.yy252, "NOT NULL");
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 276: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIs(yymsp[-3].minor.yy252, *(yymsp[-1].minor.yy401), yymsp[0].minor.yy252);
                                                delete yymsp[-1].minor.yy401;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 277: /* exprx ::= NOT expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initUnaryOp(yymsp[0].minor.yy252, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 278: /* exprx ::= BITNOT expr */
      case 280: /* exprx ::= PLUS expr */ yytestcase(yyruleno==280);
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initUnaryOp(yymsp[0].minor.yy252, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 279: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                if (yymsp[0].minor.yy252->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy252->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy252->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy252;
                                                }
                                                else
                                                {
                                                    yygotominor.yy252->initUnaryOp(yymsp[0].minor.yy252, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 281: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initBetween(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy401), yymsp[-2].minor.yy252, yymsp[0].minor.yy252);
                                                delete yymsp[-4].minor.yy401;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 282: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIn(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy401), *(yymsp[-1].minor.yy461));
                                                delete yymsp[-4].minor.yy401;
                                                delete yymsp[-1].minor.yy461;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 283: /* exprx ::= LP select RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initSubSelect(yymsp[-1].minor.yy13);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 284: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIn(yymsp[-5].minor.yy252, *(yymsp[-4].minor.yy401), yymsp[-1].minor.yy13);
                                                delete yymsp[-4].minor.yy401;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 285: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initIn(yymsp[-4].minor.yy252, *(yymsp[-3].minor.yy401), *(yymsp[-1].minor.yy479), *(yymsp[0].minor.yy479));
                                                delete yymsp[-3].minor.yy401;
                                                delete yymsp[-1].minor.yy479;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 286: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initExists(yymsp[-1].minor.yy13);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 287: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initCase(yymsp[-3].minor.yy252, *(yymsp[-2].minor.yy461), yymsp[-1].minor.yy252);
                                                delete yymsp[-2].minor.yy461;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 288: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 289: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                yygotominor.yy252->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy479));
                                                delete yymsp[-1].minor.yy479;
                                                objectForTokens = yygotominor.yy252;
                                            }
        break;
      case 290: /* expr ::= */
{
                                                yygotominor.yy252 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy252;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 294: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy430 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 295: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy461->append(yymsp[-2].minor.yy252);
                                                yymsp[-4].minor.yy461->append(yymsp[0].minor.yy252);
                                                yygotominor.yy461 = yymsp[-4].minor.yy461;
                                            }
        break;
      case 296: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy461 = new ParserExprList();
                                                yygotominor.yy461->append(yymsp[-2].minor.yy252);
                                                yygotominor.yy461->append(yymsp[0].minor.yy252);
                                            }
        break;
      case 303: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy461->append(yymsp[0].minor.yy252);
                                                yygotominor.yy461 = yymsp[-2].minor.yy461;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 304: /* nexprlist ::= exprx */
{
                                                yygotominor.yy461 = new ParserExprList();
                                                yygotominor.yy461->append(yymsp[0].minor.yy252);
                                            }
        break;
      case 305: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy113 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy401),
                                                        *(yymsp[-8].minor.yy401),
                                                        *(yymsp[-7].minor.yy479),
                                                        *(yymsp[-6].minor.yy479),
                                                        *(yymsp[-4].minor.yy479),
                                                        *(yymsp[-2].minor.yy213),
                                                        yymsp[0].minor.yy252
                                                    );
                                                delete yymsp[-8].minor.yy401;
                                                delete yymsp[-10].minor.yy401;
                                                delete yymsp[-7].minor.yy479;
                                                delete yymsp[-6].minor.yy479;
                                                delete yymsp[-4].minor.yy479;
                                                delete yymsp[-2].minor.yy213;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 306: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,175,&yymsp[-3].minor);
}
        break;
      case 311: /* idxlist_opt ::= */
{yygotominor.yy123 = new ParserIndexedColumnList();}
        break;
      case 312: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy123 = yymsp[-1].minor.yy123;}
        break;
      case 313: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy123->append(yymsp[0].minor.yy58);
                                                yygotominor.yy123 = yymsp[-2].minor.yy123;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 314: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy123 = new ParserIndexedColumnList();
                                                yygotominor.yy123->append(yymsp[0].minor.yy58);
                                            }
        break;
      case 315: /* idxlist_single ::= nm collate sortorder */
      case 316: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==316);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy479),
                                                        *(yymsp[-1].minor.yy479),
                                                        *(yymsp[0].minor.yy389)
                                                    );
                                                yygotominor.yy58 = obj;
                                                delete yymsp[0].minor.yy389;
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[-1].minor.yy479;
                                                objectForTokens = yygotominor.yy58;
                                            }
        break;
      case 320: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropIndex(*(yymsp[-1].minor.yy401), yymsp[0].minor.yy500->name1, yymsp[0].minor.yy500->name2);
                                                delete yymsp[-1].minor.yy401;
                                                delete yymsp[0].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 323: /* cmd ::= VACUUM */
{
                                                yygotominor.yy113 = new SqliteVacuum();
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 324: /* cmd ::= VACUUM nm */
{
                                                yygotominor.yy113 = new SqliteVacuum(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 325: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy113 = new SqlitePragma(*(yymsp[-1].minor.yy479), *(yymsp[0].minor.yy479));
                                                delete yymsp[-1].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 326: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 328: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==328);
{
                                                yygotominor.yy113 = new SqlitePragma(*(yymsp[-3].minor.yy479), *(yymsp[-2].minor.yy479), *(yymsp[0].minor.yy469), true);
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[0].minor.yy469;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 327: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 329: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==329);
{
                                                yygotominor.yy113 = new SqlitePragma(*(yymsp[-4].minor.yy479), *(yymsp[-3].minor.yy479), *(yymsp[-1].minor.yy469), false);
                                                delete yymsp[-4].minor.yy479;
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-1].minor.yy469;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 333: /* nmnum ::= nm */
{
                                                yygotominor.yy469 = new QVariant(*(yymsp[0].minor.yy479));
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 339: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy469->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy469) = -(yymsp[0].minor.yy469->toDouble());
                                                else if (yymsp[0].minor.yy469->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy469) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy469) = -(yymsp[0].minor.yy469->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy469 = yymsp[0].minor.yy469;
                                            }
        break;
      case 342: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy113 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy16),
                                                        *(yymsp[-11].minor.yy401),
                                                        *(yymsp[-10].minor.yy479),
                                                        *(yymsp[-9].minor.yy479),
                                                        *(yymsp[-5].minor.yy479),
                                                        *(yymsp[-8].minor.yy153),
                                                        yymsp[-7].minor.yy441,
                                                        *(yymsp[-4].minor.yy103),
                                                        yymsp[-3].minor.yy252,
                                                        *(yymsp[-1].minor.yy220),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy401;
                                                delete yymsp[-13].minor.yy16;
                                                delete yymsp[-8].minor.yy153;
                                                delete yymsp[-4].minor.yy103;
                                                delete yymsp[-10].minor.yy479;
                                                delete yymsp[-5].minor.yy479;
                                                delete yymsp[-9].minor.yy479;
                                                delete yymsp[-1].minor.yy220;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 343: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy113 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy16),
                                                        *(yymsp[-8].minor.yy401),
                                                        *(yymsp[-7].minor.yy479),
                                                        *(yymsp[-6].minor.yy479),
                                                        *(yymsp[-2].minor.yy479),
                                                        *(yymsp[-5].minor.yy153),
                                                        yymsp[-4].minor.yy441,
                                                        *(yymsp[-1].minor.yy103),
                                                        yymsp[0].minor.yy252,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy401;
                                                delete yymsp[-10].minor.yy16;
                                                delete yymsp[-5].minor.yy153;
                                                delete yymsp[-1].minor.yy103;
                                                delete yymsp[-7].minor.yy479;
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[-6].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 344: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy113 = new SqliteCreateTrigger(
                                                *(yymsp[-12].minor.yy16),
                                                *(yymsp[-10].minor.yy401),
                                                *(yymsp[-9].minor.yy479),
                                                *(yymsp[-8].minor.yy479),
                                                *(yymsp[-4].minor.yy479),
                                                *(yymsp[-7].minor.yy153),
                                                yymsp[-6].minor.yy441,
                                                *(yymsp[-3].minor.yy103),
                                                yymsp[-2].minor.yy252,
                                                *(yymsp[0].minor.yy220),
                                                3
                                                );
                                                delete yymsp[-10].minor.yy401;
                                                delete yymsp[-12].minor.yy16;
                                                delete yymsp[-7].minor.yy153;
                                                delete yymsp[-3].minor.yy103;
                                                delete yymsp[-9].minor.yy479;
                                                delete yymsp[-4].minor.yy479;
                                                delete yymsp[-8].minor.yy479;
                                                delete yymsp[0].minor.yy220;
                                                objectForTokens = yygotominor.yy113;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 345: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,177,&yymsp[-8].minor);
  yy_destructor(yypParser,175,&yymsp[-5].minor);
  yy_destructor(yypParser,260,&yymsp[-3].minor);
  yy_destructor(yypParser,261,&yymsp[-2].minor);
}
        break;
      case 348: /* trigger_time ::= BEFORE */
{yygotominor.yy153 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 349: /* trigger_time ::= AFTER */
{yygotominor.yy153 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 350: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy153 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 351: /* trigger_time ::= */
{yygotominor.yy153 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 352: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy441 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 353: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy441 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 354: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy441 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 355: /* trigger_event ::= UPDATE OF inscollist */
{
                                                yygotominor.yy441 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy387));
                                                delete yymsp[0].minor.yy387;
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 356: /* foreach_clause ::= */
{yygotominor.yy103 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 357: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy103 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 360: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy220->append(yymsp[-1].minor.yy113);
                                                yygotominor.yy220 = yymsp[-2].minor.yy220;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 361: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy220 = new ParserQueryList();
                                                yygotominor.yy220->append(yymsp[-1].minor.yy113);
                                            }
        break;
      case 362: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy220 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 367: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 368: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropTrigger(*(yymsp[-1].minor.yy401), yymsp[0].minor.yy500->name1, yymsp[0].minor.yy500->name2);
                                                delete yymsp[-1].minor.yy401;
                                                delete yymsp[0].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 371: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy113 = new SqliteAttach(*(yymsp[-4].minor.yy401), yymsp[-3].minor.yy252, yymsp[-1].minor.yy252, yymsp[0].minor.yy252);
                                                delete yymsp[-4].minor.yy401;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 372: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy113 = new SqliteDetach(*(yymsp[-1].minor.yy401), yymsp[0].minor.yy252);
                                                delete yymsp[-1].minor.yy401;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 377: /* cmd ::= REINDEX */
{yygotominor.yy113 = new SqliteReindex();}
        break;
      case 378: /* cmd ::= REINDEX nm dbnm */
      case 379: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==379);
{
                                                yygotominor.yy113 = new SqliteReindex(*(yymsp[-1].minor.yy479), *(yymsp[0].minor.yy479));
                                                delete yymsp[-1].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 382: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy113 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 383: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy113 = new SqliteAnalyze(*(yymsp[-1].minor.yy479), *(yymsp[0].minor.yy479));
                                                delete yymsp[-1].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 386: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy113 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy500->name1,
                                                        yymsp[-3].minor.yy500->name2,
                                                        *(yymsp[0].minor.yy479)
                                                    );
                                                delete yymsp[0].minor.yy479;
                                                delete yymsp[-3].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 387: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy113 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy500->name1,
                                                        yymsp[-3].minor.yy500->name2,
                                                        *(yymsp[-1].minor.yy401),
                                                        yymsp[0].minor.yy237
                                                    );
                                                delete yymsp[-1].minor.yy401;
                                                delete yymsp[-3].minor.yy500;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 388: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,179,&yymsp[-3].minor);
}
        break;
      case 394: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy113 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy401),
                                                        *(yymsp[-3].minor.yy479),
                                                        *(yymsp[-2].minor.yy479),
                                                        *(yymsp[0].minor.yy479)
                                                    );
                                                delete yymsp[-4].minor.yy401;
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-2].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 395: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy113 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy401),
                                                        *(yymsp[-6].minor.yy479),
                                                        *(yymsp[-5].minor.yy479),
                                                        *(yymsp[-3].minor.yy479),
                                                        *(yymsp[-1].minor.yy387)
                                                    );
                                                delete yymsp[-6].minor.yy479;
                                                delete yymsp[-5].minor.yy479;
                                                delete yymsp[-3].minor.yy479;
                                                delete yymsp[-7].minor.yy401;
                                                delete yymsp[-1].minor.yy387;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 398: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy387 = new ParserStringList();
                                                yygotominor.yy387->append((yymsp[0].minor.yy479)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 399: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy387->append((yymsp[0].minor.yy479)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy387 = yymsp[-2].minor.yy387;
                                                delete yymsp[0].minor.yy479;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 401: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy479->append(" "+ *(yymsp[0].minor.yy479));
                                                yygotominor.yy479 = yymsp[-1].minor.yy479;
                                                delete yymsp[0].minor.yy479;
                                            }
        break;
      case 402: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy479 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 403: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy479 = new QString("(");
                                                yygotominor.yy479->append(*(yymsp[-1].minor.yy479));
                                                yygotominor.yy479->append(")");
                                                delete yymsp[-1].minor.yy479;
                                            }
        break;
      case 405: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy479 = yymsp[-3].minor.yy479;
                                                yygotominor.yy479->append("(");
                                                yygotominor.yy479->append(*(yymsp[-1].minor.yy479));
                                                yygotominor.yy479->append(")");
                                                delete yymsp[-1].minor.yy479;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 406: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy479 = yymsp[-1].minor.yy479;
                                                yygotominor.yy479->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 407: /* with ::= */
{yygotominor.yy311 = nullptr;}
        break;
      case 408: /* with ::= WITH wqlist */
{
                                                yygotominor.yy311 = yymsp[0].minor.yy311;
                                                objectForTokens = yygotominor.yy311;
                                            }
        break;
      case 409: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy311 = yymsp[0].minor.yy311;
                                                yygotominor.yy311->recursive = true;
                                                objectForTokens = yygotominor.yy311;
                                            }
        break;
      case 410: /* wqlist ::= nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy311 = SqliteWith::append(*(yymsp[-5].minor.yy479), *(yymsp[-4].minor.yy123), yymsp[-1].minor.yy13);
                                                delete yymsp[-5].minor.yy479;
                                                delete yymsp[-4].minor.yy123;
                                            }
        break;
      case 411: /* wqlist ::= wqlist COMMA nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy311 = SqliteWith::append(yymsp[-7].minor.yy311, *(yymsp[-5].minor.yy479), *(yymsp[-4].minor.yy123), yymsp[-1].minor.yy13);
                                                delete yymsp[-5].minor.yy479;
                                                delete yymsp[-4].minor.yy123;
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 412: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy311 = new SqliteWith();
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
